<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>awk 编程</title>
      <link href="/2023/11/18/Awk/"/>
      <url>/2023/11/18/Awk/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-awk-编写-shell-脚本"><a href="#使用-awk-编写-shell-脚本" class="headerlink" title="使用 awk 编写 shell 脚本"></a>使用 awk 编写 shell 脚本</h1><ul><li>awk 是一个强大的 Linux 命令，有强大的文本格式化的能力</li><li>三剑客：<ul><li>grep：擅长单纯的查找或匹配文本内容</li><li>awk：更适合编辑、处理匹配到的文本内容</li><li>sed：更适合格式化文本内容，对文本进行复杂处理</li></ul></li></ul><h2 id="1-awk-基础"><a href="#1-awk-基础" class="headerlink" title="1. awk 基础"></a>1. awk 基础</h2><ul><li><p>awk 语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk [option] &#x27;pattern[action]&#x27; file ...</span><br><span class="line">awk   参数     &#x27;条件动作&#x27;        文件</span><br></pre></td></tr></table></figure></li><li><p>Action 指的是动作，awk 擅长文本格式化，且输出格式化后的结果，因此最常用的动作就是 print</p><ul><li>条件动作举例：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;print $0&#125;  # 把每行都打印出来, 等同于 &#123;print&#125;</span><br><span class="line">&#123;print $1&#125;  # 把每行的第一列打印出来(默认以空格为列的分隔符)</span><br><span class="line">&#123;print $NF&#125;  # 每行的最后一列[倒数第二列可以写成$(NF-1)]</span><br><span class="line">&#123;print $1,$4,$5&#125;  # 打印多列(中间加上逗号是为了空格分割)</span><br></pre></td></tr></table></figure></li><li><p>awk 是按行处理文件，一行处理完毕，处理下一行，根据用户指定的分隔符去工作，没有指定则默认空格</p></li><li><p>awk 分隔符有两种：</p><ul><li>输入分隔符，awk 默认是空格，空白字符，英文是 file separator，变量名是 FS</li><li>输出分隔符，output field separator，简称 OFS，默认也是空格</li></ul></li></ul><h2 id="2-文本格式化"><a href="#2-文本格式化" class="headerlink" title="2. 文本格式化"></a>2. 文本格式化</h2><h3 id="2-1-awk-内置变量"><a href="#2-1-awk-内置变量" class="headerlink" title="2.1 awk 内置变量"></a>2.1 awk 内置变量</h3><table><thead><tr><th align="center">内置变量</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">$n</td><td align="center">指定分隔符后，当前记录的第n个字段</td></tr><tr><td align="center">$0</td><td align="center">完整的输入记录</td></tr><tr><td align="center">FS</td><td align="center">字段分隔符，默认是空格</td></tr><tr><td align="center">NF(Number of fields)</td><td align="center">分割后，当前行一共有多少个字段(几列?)</td></tr><tr><td align="center">NR(Number of records)</td><td align="center">当前记录数，行数</td></tr><tr><td align="center">FILENAME</td><td align="center">当前文件名</td></tr><tr><td align="center">可用 man 手册查看</td><td align="center">man awk</td></tr></tbody></table><h3 id="2-2-自动定义输出内容"><a href="#2-2-自动定义输出内容" class="headerlink" title="2.2 自动定义输出内容"></a>2.2 自动定义输出内容</h3><ul><li><strong>awk，必须外层单引号，内存双引号</strong></li><li>内置变量 <code>$1、$2</code> 都不得添加双引号，否则会识别为文本，尽量别加引号<ul><li>如：<code>awk &#39;&#123;print &quot;第一列: &quot;$1, &quot;第二列: &quot;$3&#125;&#39; hello.txt</code></li><li>如(将 ipconfig 里的 eth0 段的ip输出)：<code>ipconfig eth0 | awk &#39;NR==2&#123;print $0&#125;&#39;</code></li></ul></li></ul><h3 id="2-3-awk-参数"><a href="#2-3-awk-参数" class="headerlink" title="2.3 awk 参数"></a>2.3 awk 参数</h3><table><thead><tr><th align="center">参数</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">-F</td><td align="center">指定分割字段符</td></tr><tr><td align="center">-v</td><td align="center">定义或修改一个 awk 内部的变量</td></tr><tr><td align="center">-f</td><td align="center">从脚本文件中读取 awk 命令</td></tr></tbody></table><ul><li>举例(指定冒号作为分隔符)：<ul><li><code>awk -F &quot;:&quot; &#39;&#123;print $1&#125;&#39; hello.txt</code></li><li>也可以用 -v 修改 FS 参数：<code>awk -v FS=&quot;:&quot; &#39;&#123;print $1,$NF&#125;&#39; hello.txt</code></li><li>还可以修改输出分隔符：<code>awk -v OFS=&quot;\t&quot; &#39;&#123;print $1,$NF&#125;&#39; hello.txt</code></li></ul></li></ul><h3 id="2-4-显示文件第5行"><a href="#2-4-显示文件第5行" class="headerlink" title="2.4 显示文件第5行"></a>2.4 显示文件第5行</h3><ul><li><code>NR</code> 在 awk 中表示行号，<code>NR==5</code> 表示行号是 5 的那一行<ul><li>举例：找到第五行和第六行的内容并打印：<code>awk &#39;NR==5, NR==6&#123;print $0&#125;&#39; hello.txt</code></li><li>看行号2-5的内容：<code>awk &#39;NR==2, NR==5&#39; hello.txt</code></li><li>打印行号37-40的内容同时显示行号：<code>awk &#39;NR==37, NR==40&#123;print NR,$0&#125;&#39; hello.txt</code></li></ul></li></ul><h2 id="3-awk-模式-pattern"><a href="#3-awk-模式-pattern" class="headerlink" title="3. awk 模式 pattern"></a>3. awk 模式 pattern</h2><ul><li>特殊的 pattern：<code>BEGIN</code> 和 <code>END</code><ul><li><code>BEGIN</code> 模式是处理文本之前需要执行的操作</li><li><code>END</code> 模式是处理完所有行之后执行的操作</li></ul></li><li>比如：<ul><li><code>awk BEGIN&#123;print &quot;hhh&quot;&#125; hello.txt</code></li><li><code>awk &#39;BEGIN&#123;print &quot;处理文本之前&quot;&#125;&#123;print $0&#125;END&#123;print &quot;所有文本处理完毕&quot;&#125;&#39; hello.txt</code></li></ul></li></ul><h2 id="4-awk-与正则表达式"><a href="#4-awk-与正则表达式" class="headerlink" title="4. awk 与正则表达式"></a>4. awk 与正则表达式</h2><ul><li>主要与 pattern模式(条件)结合使用<ul><li>不指定模式，awk每一行都会执行对应的动作</li><li>指定了模式，只有被模式匹配到的、符合条件的行才会执行动作</li></ul></li><li>awk 使用正则语法：<ul><li><code>awk &#39;/正则表达式/动作&#39; /etc/passwd</code></li><li>awk 命令使用正则表达式，必须把正则放入 <code>//</code> 双斜杠中，匹配到结果后执行动作 <code>&#123;print $0&#125;</code>，打印整行信息</li></ul></li><li>比如：<ul><li>输出以 <code>games</code> 开头的行：<code>awk &#39;/^games/&#123;print $0&#125;&#39; hello.txt</code></li><li>输出符合上面条件的行的第一列和最后一列(分隔符为冒号)：<code>awk -F &quot;:&quot; &#39;/^games/&#123;print $0, $NF&#125;&#39; hello.txt</code></li></ul></li></ul><h2 id="5-awk-案例"><a href="#5-awk-案例" class="headerlink" title="5. awk 案例"></a>5. awk 案例</h2><h3 id="5-1-插入新字段和格式化空白"><a href="#5-1-插入新字段和格式化空白" class="headerlink" title="5.1 插入新字段和格式化空白"></a>5.1 插入新字段和格式化空白</h3><ul><li>在 <code>a b c d</code> 的 <code>b</code> 后面插入 3 个字段 <code>e f g</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo a b c d | awk &#x27;&#123;$2=$2&quot; e f g&quot;;print&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li>移除每行的前缀、后缀空白，并将各部分左对齐</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;OFS=&quot;\t&quot;&#125;&#123;$1=$1;print&#125;&#x27; a.txt</span><br></pre></td></tr></table></figure><h3 id="5-2-筛选-IPV4-地址"><a href="#5-2-筛选-IPV4-地址" class="headerlink" title="5.2 筛选 IPV4 地址"></a>5.2 筛选 IPV4 地址</h3><ul><li>从 ifconfig 命令的结果中筛选出除了 lo 网卡外的所有 IPv4 地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">法一：正则匹配开头为inet 且第二列不以 127 开头</span></span><br><span class="line">ifconfig | awk &#x27;/inet / &amp;&amp; !($2 ~ /^127/)&#123;print $2&#125;&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按段落读取</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">法二：一次性读取一段，可以修改输入的行分隔符为<span class="string">&quot;&quot;</span></span></span><br><span class="line">ifconfig | awk &#x27;BEGIN&#123;RS=&quot;&quot;&#125;!/lo/&#123;print $6&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="5-3-读取-ini-配置文件中的某段"><a href="#5-3-读取-ini-配置文件中的某段" class="headerlink" title="5.3 读取 .ini 配置文件中的某段"></a>5.3 读取 .ini 配置文件中的某段</h3><blockquote><p>读取 mysql 段</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匹配包含 [mysql] 的，但是可读性较差</span></span><br><span class="line">/\[mysql\]/&#123;&#125;  # 使用反斜线转义一下中括号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于能够确定的字符串，可用index去搜索</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索到的话，返回索引位；搜索不到返回0</span></span><br><span class="line"><span class="meta prompt_">index($</span><span class="language-bash">0, <span class="string">&quot;[mysql]&quot;</span>) &#123;</span></span><br><span class="line">    print   # 输出符合条件的那一行</span><br><span class="line">    while( (getline var) &gt; 0 ) &#123;</span><br><span class="line">        if (var ~ /\[.*\]/) &#123;  # 如果匹配到格式形如 [..] 的，就停止</span><br><span class="line">             exit</span><br><span class="line">        &#125;</span><br><span class="line">        print var</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">getline 返回值:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;0 表示已经读取到数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">=0 表示遇到结尾 EOF，也就表示没有读取到东西</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;0 表示读取报错</span></span><br></pre></td></tr></table></figure><h3 id="5-4-根据某字段去重"><a href="#5-4-根据某字段去重" class="headerlink" title="5.4 根据某字段去重"></a>5.4 根据某字段去重</h3><blockquote><p>对出现的次数进行判断？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以问号为分隔符</span></span><br><span class="line">awk -F &quot;?&quot; &#x27;&#123;</span><br><span class="line"><span class="meta prompt_">arr[$</span><span class="language-bash">2]++;<span class="keyword">if</span>(arr[<span class="variable">$2</span>]==1)&#123;<span class="built_in">print</span>&#125;</span></span><br><span class="line">&#125;&#x27; 1.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以更加简短</span></span><br><span class="line">awk -F &quot;?&quot; &#x27;&#123;</span><br><span class="line">!arr[$2]++&#123;print&#125;  # 后置++返回加之前的数, 所以如果加之前为0, 就打印</span><br><span class="line">&#125;&#x27; 1.txt</span><br></pre></td></tr></table></figure><h3 id="5-5-次数统计"><a href="#5-5-次数统计" class="headerlink" title="5.5 次数统计"></a>5.5 次数统计</h3><blockquote><p>需要用到数组</p></blockquote><ul><li>统计单词出现次数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;arr[$0]++&#125;END&#123;for(i in arr)&#123;print arr[i], i&#125;&#x27; 1.txt</span><br></pre></td></tr></table></figure><ul><li>统计 TCP 链接状态数量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tnap 2&gt;/dev/null | awk &#x27;/^tcp/&#123;arr[$6]++&#125;END&#123;for(i in arr)&#123;print arr[i], i&#125;&#125;&#x27; </span><br></pre></td></tr></table></figure><ul><li>统计日志中各IP访问非200状态码的次数，结合 sort 和 head 命令显示前十个最多的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;$8!=200&#123;arr[$1]++&#125;END&#123;for(i in arr)&#123;print arr[i], i&#125;&#x27; access.log | sort -k1nr | head -n 10 </span><br></pre></td></tr></table></figure><ul><li>统计每个 URL 的独立访问 IP 有多少个 (去重)，并且要为每个 URL 保存一个对应的文件：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">BEGIN &#123;</span><br><span class="line">    FS=&quot;|&quot;  # 指定字段分隔符</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SEPSUB \034 真正保存时以 <span class="variable">$1</span>\034<span class="variable">$2</span> 保存</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是第一次出现(类似联合主键)</span></span><br><span class="line">    if (!arr[$1, $2]++) &#123;  # awk 中的数组是关联数组, 它的索引全是字符串</span><br><span class="line">    arr1[$1]++ </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">END &#123;</span><br><span class="line">for(i in arr1) &#123;</span><br><span class="line">        print i, arr1[i] &gt; (i&quot;.txt&quot;)</span><br><span class="line">&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lesson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2023/11/18/Spring/"/>
      <url>/2023/11/18/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring5-框架"><a href="#Spring5-框架" class="headerlink" title="Spring5 框架"></a>Spring5 框架</h1><h2 id="1-Spring-概念"><a href="#1-Spring-概念" class="headerlink" title="1. Spring 概念"></a>1. Spring 概念</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>（1）概念</p><ul><li>Spring 是 <strong>轻量级</strong> 的 <strong>开源</strong> 的 JavaEE <strong>框架</strong></li><li>Spring 可以解决企业应用开发的复杂性</li><li>Spring 有两个核心部分：<strong>IOC</strong> 和 <strong>AOP</strong><ul><li><strong>IOC：控制反转</strong>，把创建对象的过程交给 Spring 进行管理</li><li><strong>AOP：面向切面</strong>，不修改源代码的情况下，进行功能增强</li></ul></li><li>Spring 的特点：<ul><li>方便解耦，简化开发</li><li>Aop 编程支持</li><li>方便程序测试</li><li>方便和其他框架进行整合</li><li>方便进行事务操作</li><li>降低 API 开发难度</li></ul></li></ul><h3 id="1-2-入门案例"><a href="#1-2-入门案例" class="headerlink" title="1.2 入门案例"></a>1.2 入门案例</h3><p>（1）案例：</p><ul><li><p>**下载 Spring5 **</p><ul><li><p>官网地址：<a href="https://spring.io/">https://spring.io/</a></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667555997432.png" alt="图1.2.1"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667556139806.png" alt="图1.2.2"></p></li><li><p>点击 github 图标进入(貌似进不去…)</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667556230644.png" alt="图1.2.3"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667556272335.png" alt="图1.2.4"></p></li><li><p>下载地址：<a href="https://repo.spring.io/artifactory/release/org/springframework/spring">https://repo.spring.io/artifactory/release/org/springframework/spring</a></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667556587439.png" alt="图1.2.5"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667566097517.png" alt="图1.2.6"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667608531644.png" alt="图1.2.7"></p></li></ul></li><li><p><strong>打开 idea 工具，创建普通 Java 工具</strong></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667608708537.png" alt="图1.2.8"></p></li><li><p><strong>导入 spring5 相关 jar 包</strong></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667608854114.png" alt="图1.2.9"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667609263743.png" alt="图1.2.10"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667609326385.png" alt="图1.2.11"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667609442985.png" alt="图1.2.12"></p></li><li><p><strong>用 spring 的方式创建对象</strong></p><ul><li><p>创建普通类，在这个类创建普通方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 spring 的配置文件，在配置文件配置创建的对象</p><blockquote><p>Spring 配置文件使用 xml 格式</p></blockquote><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667609779634.png" alt="图1.2.13"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667609896789.png" alt="图1.2.14"></p></li><li><p>进行测试代码编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring5</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 加载 spring 的配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取配置创建的对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="1-3-Spring-家族"><a href="#1-3-Spring-家族" class="headerlink" title="1.3 Spring 家族"></a>1.3 Spring 家族</h3><p>（1）项目列表：<a href="https://spring.io/projects">https://spring.io/projects</a>  </p><p>（2）<strong>Spring Framework</strong></p><ul><li><p>Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework为基础的</p></li><li><p><strong>Spring Framework</strong> 特性</p><blockquote><p><strong>非侵入式</strong>：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序时结构清晰、简洁优雅。</p><p><strong>控制反转</strong>：IOC——Inversion of Control，<strong>翻转资源获取方向</strong>。把自己创建资源、向环境索取资源变成环境将资源准备好，我们享受资源注入。（<strong>重点</strong>）</p><p><strong>面向切面编程</strong>：AOP——Aspect Oriented Programming，<strong>在不修改源代码的基础上增强代码功能</strong>。<strong>（重点）</strong></p><p><strong>容器</strong>：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发效率。（理解）</p><p><strong>组件化</strong>：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML和 Java <strong>注解组合这些对象</strong>。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭建超大型复杂应用系统。</p><p><strong>声明式</strong>：很多以前需要编写代码才能实现的功能，现在<strong>只需要声明需求即可由框架代为实现</strong>。</p><p><strong>一站式</strong>：在 IOC 和 AOP 的基础上可以<strong>整合各种企业应用的开源框架和优秀的第三方类库</strong>。而且 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现。</p></blockquote></li><li><p><strong>Spring Framework</strong> 五大功能模块</p><table><thead><tr><th align="center"><strong>功能模块</strong></th><th align="center"><strong>功能介绍</strong></th></tr></thead><tbody><tr><td align="center">Core Container</td><td align="center">核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器</td></tr><tr><td align="center">AOP&amp;Aspects</td><td align="center">面向切面编程</td></tr><tr><td align="center">Testing</td><td align="center">提供了对 junit 或 TestNG 测试框架的整合</td></tr><tr><td align="center">Data Access&#x2F;Integration</td><td align="center">提供了对数据访问 &#x2F; 集成的功能</td></tr><tr><td align="center">Spring MVC</td><td align="center">提供了面向 Web 应用程序的集成功能</td></tr></tbody></table></li></ul><h2 id="2-IOC-容器"><a href="#2-IOC-容器" class="headerlink" title="2. IOC 容器"></a>2. IOC 容器</h2><h3 id="2-1-IOC-底层原理"><a href="#2-1-IOC-底层原理" class="headerlink" title="2.1 IOC 底层原理"></a>2.1 IOC 底层原理</h3><p>（1）什么是 IOC？</p><blockquote><p>a&gt; <strong>获取资源的传统方式</strong>：</p><p>自己做饭：买菜、洗菜、择菜、改刀、炒菜，全过程参与，费时费力，<strong>必须清楚了解资源创建整个过程中的全部细节且熟练掌握</strong>，在应用程序中的组件需要获取资源时，传统的方式是<strong>组件 主动 的从容器中获取所需要的资源</strong>，在这样的模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效率</p><p>b&gt; <strong>反转控制方式获取资源</strong>：</p><p>点外卖：下单、等、吃，省时省力，<strong>不必关心资源创建过程的所有细节</strong>，反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：<strong>反转了资源的获取方向 —— 改由容器主动的将资源推送给需要的组件</strong>，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的被动形式</p><p>c&gt; <strong>DI</strong>：Dependency Injection ，翻译过来是 <strong>依赖注入(对当前 spring 所管理的对象中的属性进行赋值)</strong> ，<strong>DI 是 IOC 的另一种表述方式</strong>：即<strong>组件以一些预先定义好的方式</strong>（例如： setter 方法）<strong>接受来自于容器 的资源注入</strong>。相对于IOC 而言，这种表述更直接。</p><p>所以结论是： <strong>IOC 就是一种反转控制的思想，而 DI 是对 IOC 的一种具体实现。</strong></p></blockquote><ul><li><strong>Inversion of Control(IOC) 控制反转</strong>，是面向对象编程中的一种设计原则，用来<strong>减低</strong>代码间的<strong>耦合度</strong></li><li>控制反转，<strong>把对象创建和对象之间的调用过程，交给 Spring 进行管理</strong></li><li>前头做的入门案例就是 IOC 实现</li></ul><p>（2）IOC 底层原理</p><ul><li><p>主要用到 <strong>xml 解析、工厂模式、反射</strong></p></li><li><p>画图讲解：</p><ul><li>原始方式</li></ul><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667611028401.png" alt="图2.1.1"></p><ul><li>工厂模式(感觉只是耦合度转移了…)</li></ul><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667611250471.png" alt="图2.1.2"></p><ul><li><p>IOC 过程(这样改的话只要改 xml 即可…)</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667611781019.png" alt="图2.1.3"></p></li></ul></li></ul><h3 id="2-2-IOC-接口"><a href="#2-2-IOC-接口" class="headerlink" title="2.2 IOC 接口"></a>2.2 IOC 接口</h3><blockquote><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。 <strong>IOC 容器中管理的组件也叫做 bean</strong> 。在创建bean 之前，首先需要创建 IOC 容器。 Spring 提供了 IOC 容器的两种实现方式：</p><p>a&gt; <strong>BeanFactory</strong>：</p><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p><p>b&gt; <strong>ApplicationContext</strong>：</p><p><strong>BeanFactory 的子接口</strong>，提供了更多高级特性。<strong>面向 Spring 的使用者</strong>，几乎所有场合都使用<br>ApplicationContext 而不是底层的 BeanFactory</p></blockquote><p>（1）IOC 思想基于 IOC 容器完成，<strong>IOC 容器底层就是对象工厂</strong></p><p>（2）Spring 提供 IOC 容器实现的两种方式：(两个接口)</p><ul><li><strong>BeanFactory</strong>：IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用<ul><li>加载配置文件时不会创建对象，在&#x3D;&#x3D;获取(使用)对象的时候才去创建&#x3D;&#x3D;</li></ul></li><li><strong>ApplicationContext</strong>：BeanFactory 接口的子接口，提供了更多更强大的功能，一般由开发人员进行使用<ul><li>&#x3D;&#x3D;加载配置文件&#x3D;&#x3D;的时候，就会把在配置文件对象进行&#x3D;&#x3D;创建&#x3D;&#x3D;</li></ul></li></ul><blockquote><p>后者慢启动但是快响应，后者较前者稍好些?</p></blockquote><p>（3）<strong>ApplicationContext</strong> 接口的实现类：</p><ul><li><p><strong>ctrl + H</strong> 打开类的结构</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1667612878379.png" alt="图2.2.1"></p></li><li><p>表格：</p></li></ul><table><thead><tr><th align="center"><strong>类型名</strong></th><th align="center"><strong>简介</strong></th></tr></thead><tbody><tr><td align="center">ClassPathXmlApplicationContext</td><td align="center">通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td align="center">FileSystemXmlApplicationContext</td><td align="center">通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td align="center">ConfigurableApplicationContext</td><td align="center">ApplicationContext 的子接口，包含一些扩展方法  refresh() 和 close() ， 让 ApplicationContext 具有启动、关闭和刷新上下文的能力</td></tr><tr><td align="center">WebApplicationContext</td><td align="center">专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象， 并将对象引入存入 ServletContext 域中</td></tr></tbody></table><h3 id="2-3-IOC-操作-Bean-管理"><a href="#2-3-IOC-操作-Bean-管理" class="headerlink" title="2.3 IOC 操作 Bean 管理"></a>2.3 IOC 操作 Bean 管理</h3><p>（1）什么是 Bean 管理</p><ul><li>Bean 管理指的是两个操作<ul><li><strong>Spring 创建对象</strong></li><li><strong>Spring 注入属性</strong></li></ul></li></ul><p>（2）Bean 管理操作的两种方式</p><ul><li>基于 <strong>xml 配置文件</strong>方式</li><li>基于<strong>注解方式</strong>实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 bean 的三种方式:</span></span><br><span class="line"><span class="comment"> * 1. 根据 bean 的 id 获取</span></span><br><span class="line"><span class="comment"> * 2. 根据 bean 的类型获取(常用)</span></span><br><span class="line"><span class="comment"> *    注意: 根据类型获取 bean 时, 要求 IOC 容器中有且只有一类型匹配的 bean</span></span><br><span class="line"><span class="comment"> *          若没有任何一个类型匹配的 bean, 此时抛出异常: NoSuchBeanDefinitionException</span></span><br><span class="line"><span class="comment"> *          若有多个类型匹配的 bean, 此时抛出异常: NoUniqueBeanDefinitionException</span></span><br><span class="line"><span class="comment"> * 3. 根据 bean 的 类型 和 id 获取</span></span><br><span class="line"><span class="comment"> * 4. 用 Student 所实现的接口(或者所继承的父类) Person 来获取</span></span><br><span class="line"><span class="comment"> *  前提是 bean 的类型唯一, 因为如果一个接口有多个实现类, 那么就不可以根据接口类型获取 bean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  结论: 根据类型来获取 bean 时，在满足 bean 唯一性的前提下,其实只是看：</span></span><br><span class="line"><span class="comment"> * 『对象 instanceof 指定的类型』的返回结果, 只要返回的是 true 就可以认定为和类型匹配, 能够获取到</span></span><br><span class="line"><span class="comment"> *  即通过 bean 的类型, bean 所继承的类的类型, bean 所实现的接口类型都可以获取 bean</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="2-4-IOC-基于-xml-操作-Bean-管理"><a href="#2-4-IOC-基于-xml-操作-Bean-管理" class="headerlink" title="2.4  IOC 基于 xml 操作 Bean 管理"></a>2.4  IOC 基于 xml 操作 Bean 管理</h3><h4 id="2-4-1-基于-xml-方式创建对象"><a href="#2-4-1-基于-xml-方式创建对象" class="headerlink" title="2.4.1 基于 xml 方式创建对象"></a>2.4.1 <strong>基于 xml 方式创建对象</strong></h4><p>（1）在 spring 配置文件中使用 bean 标签，在标签里添加对应属性，就可以实现对象创建</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 User类对象创建 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）在 bean 标签里的常用属性</p><ul><li><strong>id</strong> 属性：唯一标识(给对象取一个别名)</li><li><strong>class</strong> 属性：类全路径(包类路径)</li><li><strong>name</strong> 属性：类似与 id，区别是可以加特殊符号，现在用的少</li></ul><p>（3）创建对象时，<strong>默认也是执行的无参数的构造方法完成对象的创建</strong>(如果写了有参则把无参覆盖掉，会报错)</p><h4 id="2-4-2-基于-xml-方式注入属性"><a href="#2-4-2-基于-xml-方式注入属性" class="headerlink" title="2.4.2 基于 xml 方式注入属性"></a>2.4.2 <strong>基于 xml 方式注入属性</strong></h4><p>（1）<strong>DI</strong>：依赖注入，**就是注入属性(为当前类中的属性进行赋值)**，需在创建对象的基础上完成(<strong>是 IOC 的一种具体实现</strong>)</p><p>（2）&#x3D;&#x3D;第一种注入方式：<strong>使用 set 方法进行注入</strong>&#x3D;&#x3D;</p><ul><li><p>创建类，定义属性和对应的 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="comment">// 创建属性</span></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> String bookAuthor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建属性对应的 set 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookName</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookAuthor</span><span class="params">(String bookAuthor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookAuthor = bookAuthor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(bookName + <span class="string">&quot;:&quot;</span> + bookAuthor + <span class="string">&quot;:&quot;</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 spring 配置文件中配置对象创建，配置属性注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- set 方法注入属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 在 bean 标签里使用 properties 标签完成属性注入</span></span><br><span class="line"><span class="comment">            name: 类里面属性名称</span></span><br><span class="line"><span class="comment">            value: 向属性注入的值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;易筋经&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookAuthor&quot;</span> <span class="attr">value</span>=<span class="string">&quot;达摩&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBook</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 加载 spring 的配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取配置创建的对象</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(book);  <span class="comment">// com.thr.spring5.Book@1b26f7b2</span></span><br><span class="line">    book.testDemo();  <span class="comment">// 易筋经:达摩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）&#x3D;&#x3D;第二种注入方式：<strong>使用有参构造进行注入</strong>&#x3D;&#x3D;</p><ul><li><p>创建类：定义属性，创建属性对应的有参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">(String orderName, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderName = orderName;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(orderName + <span class="string">&quot;:&quot;</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 spring 的配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3. 有参构造方法注入属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.1 创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.2 在 bean 标签里使用 constructor-arg 标签完成属性注入</span></span><br><span class="line"><span class="comment">            name: 类里面属性名称</span></span><br><span class="line"><span class="comment">            value: 向属性注入的值</span></span><br><span class="line"><span class="comment">            也可以用索引值</span></span><br><span class="line"><span class="comment">            index: 0 表示有参构造的第一个参数, 以此类推</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;orderName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;constructor-arg index=&quot;0&quot; value=&quot;手机&quot;&gt;&lt;/constructor-arg&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOrders</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 加载 spring 的配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取配置创建的对象</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(orders);  <span class="comment">// com.thr.spring5.Orders@78186a70</span></span><br><span class="line">        orders.testDemo();  <span class="comment">// 电脑:china</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（3）简化方式：<strong>p 名称空间注入</strong>，使用 p 名称空间注入，可以简化 xml 配置方式(底层其实还是 set 方法注入，只是写法上做了简化)</p><ul><li><p>添加 p 名称空间在配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>进行属性注入，在 bean 标签里面进行操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4. p 名称空间注入(需要有 set 方法) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.Book&quot;</span> <span class="attr">p:bookName</span>=<span class="string">&quot;九阳神功&quot;</span> <span class="attr">p:bookAuthor</span>=<span class="string">&quot;无名氏&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-4-3-基于-xml-方式注入空值和特殊符号"><a href="#2-4-3-基于-xml-方式注入空值和特殊符号" class="headerlink" title="2.4.3 基于 xml 方式注入空值和特殊符号"></a>2.4.3 <strong>基于 xml 方式注入空值和特殊符号</strong></h4><p>（1）空值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置 null 值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）特殊符号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 属性值中包含特殊符号, 两种方式</span></span><br><span class="line"><span class="comment">     1. 把 &lt;&gt; 进行转义(可以用转义&amp;lt;和&amp;gt;)</span></span><br><span class="line"><span class="comment">     2. 把特殊符号内容写到 CDATA 结构中</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-4-注入属性-外部-bean"><a href="#2-4-4-注入属性-外部-bean" class="headerlink" title="2.4.4 注入属性-外部 bean"></a>2.4.4 <strong>注入属性-外部 bean</strong></h4><p>（1）创建两个类 service 类和 dao 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add....&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 原始方式: 创建 UserDao 对象（多态）</span></span><br><span class="line">        <span class="comment">// UserDao userDao = new UserDaoImpl();</span></span><br><span class="line">        <span class="comment">// userDao.update();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao update...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）在 service 调用 dao 里面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 UserDao 类型属性, 生成 set 方法</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add....&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在 spring 配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. service 和 dao 对象创建 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.service.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入 userDao 对象</span></span><br><span class="line"><span class="comment">             name 属性: 类里面属性名称</span></span><br><span class="line"><span class="comment">             ref 属性: 创建的 userDao 对象 bean 标签 id 值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.dao.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBean</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 加载 spring 配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 获取配置创建的对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line"></span><br><span class="line">        userService.add();  <span class="comment">// service add.... dao update...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-5-注入属性-内部-bean"><a href="#2-4-5-注入属性-内部-bean" class="headerlink" title="2.4.5 注入属性-内部 bean"></a>2.4.5 <strong>注入属性-内部 bean</strong></h4><p>（1）一对多关系：eg.部门(1)和员工(多)</p><p>（2）在实体类中表示一对多关系，员工表示所属部门 –&gt; 使用对象类型属性进行表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部门类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dept</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDname</span><span class="params">(String dname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dname = dname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 员工类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 员工属于某一个部门, 使用对象形式表示</span></span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEname</span><span class="params">(String ename)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在 spring 配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内部 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 先设置两个普通属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置对象类型属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安保部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 加载 spring 配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取配置创建的对象</span></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;emp&quot;</span>, Emp.class);</span><br><span class="line"></span><br><span class="line">    emp.add();  <span class="comment">// lucy:girl:Dept&#123;dname=&#x27;安保部&#x27;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-6-注入属性-级联赋值"><a href="#2-4-6-注入属性-级联赋值" class="headerlink" title="2.4.6 注入属性-级联赋值"></a>2.4.6 <strong>注入属性-级联赋值</strong></h4><p>（1）在内部 bean 的基础上重新写一个 bean 文件</p><ul><li><p>第一种写法</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 级联赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置两个普通属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置对象类型属性(用级联赋值) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财务部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二种写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 级联赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.bean.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置两个普通属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;girl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置对象类型属性(用级联赋值) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第二种方法, 但要注意生成 get 方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dept.dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;技术部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.bean.Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财务部&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 加载 spring 配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取配置创建的对象</span></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;emp&quot;</span>, Emp.class);</span><br><span class="line"></span><br><span class="line">    emp.add();  <span class="comment">// lucy:girl:Dept&#123;dname=&#x27;财务部&#x27;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-4-7-xml-注入集合属性"><a href="#2-4-7-xml-注入集合属性" class="headerlink" title="2.4.7 xml 注入集合属性"></a>2.4.7 <strong>xml 注入集合属性</strong></h4><p>（1）分类：</p><ul><li>注入数组类型属性</li><li>注入 List 集合类型属性</li><li>注入 Map 集合类型属性</li></ul><p>（2）具体步骤</p><ul><li><p>创建类，定义数组，list，set，生成对应的 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stu</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 数组类型的属性</span></span><br><span class="line">    <span class="keyword">private</span> String[] courses;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. list 集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. map 集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. set 集合类型属性</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; sets;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourses</span><span class="params">(String[] courses)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, String&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSets</span><span class="params">(Set&lt;String&gt; sets)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sets = sets;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(courses));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(maps);</span><br><span class="line">        System.out.println(sets);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 spring 配置文件进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 集合类型属性注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.1 数组类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>java课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>数据库课程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.2 list 类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.3 map 类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;JAVA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.4 set 类型属性注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sets&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>Redis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCollection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="type">Stu</span> <span class="variable">stu</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;stu&quot;</span>, Stu.class);</span><br><span class="line">        stu.test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// [java课程, 数据库课程]</span></span><br><span class="line"><span class="comment">// [张三, 李四]</span></span><br><span class="line"><span class="comment">// &#123;JAVA=java, PHP=php&#125;</span></span><br><span class="line"><span class="comment">// [MySQL, Redis]</span></span><br></pre></td></tr></table></figure></li></ul><p>（3）在集合里设置对象的值</p><ul><li><p>建一个 course 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 课程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cname;  <span class="comment">// 课程名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCname</span><span class="params">(String cname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cname = cname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 Stu 类中增加属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5. 学生所学多门课程</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Course&gt; courseList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourseList</span><span class="params">(List&lt;Course&gt; courseList)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.courseList = courseList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCourses</span><span class="params">(String[] courses)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.courses = courses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>xml 中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.1 注入 list 集合类型, 值是对象(用 ref 标签中的 bean 属性) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.collectiontype.Stu&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;courseList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;course2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建多个 course 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring5框架课程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;course2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.collectiontype.Course&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MyBatis框架课程&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>（4）把集合注入部分提取出来</p><ul><li><p>在 spring 配置文件中引入名称空间 util</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1668654440695.png" alt="2.4.7"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">&quot;http://www.springframework.org/schema/util&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 util 标签完成 list 集合注入提取</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 提取 list 集合类型属性注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>易筋经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阴真经<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>九阳神功<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 提取 list 集合类型属性注入使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.collectiontype.Book&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCollection2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">    book.test();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-工厂-bean"><a href="#2-5-工厂-bean" class="headerlink" title="2.5 工厂 bean"></a>2.5 工厂 bean</h3><p>（1）&#x3D;&#x3D;Spring 有两种类型的 bean ，一种普通 bean，另外一种工厂bean(FactoryBean 是 Spring 里头内置的一种 bean)&#x3D;&#x3D;</p><ul><li>普通 bean：在配置文件中定义 bean 类型就是返回类型</li><li>工厂 bean：在配置文件中定义 bean 类型可以和返回类型不一样</li></ul><p>（2）怎么做？</p><ul><li><p>创建类，让这个类作为工厂 bean，实现接口 FactoryBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Course&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义返回 bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Course <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">        course.setCname(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> course;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean3.xml&quot;</span>);</span><br><span class="line">    <span class="type">Course</span> <span class="variable">course</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;myBean&quot;</span>, Course.class);</span><br><span class="line">    System.out.println(course);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.factorybean.MyBean&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6-Bean-的作用域和生命周期"><a href="#2-6-Bean-的作用域和生命周期" class="headerlink" title="2.6 Bean 的作用域和生命周期"></a>2.6 Bean 的作用域和生命周期</h3><p>（1）<strong>bean 的作用域</strong></p><ul><li><p>在 Spring 里面，默认情况下，bean 是单实例对象</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1668921775798.png" alt="图2.6.1"></p></li><li><p>在 Spring 里面，如何设置创建 bean 实例是单实例还是多实例</p><ul><li><p>在 spring 配置文件 bean 标签里有属性(<strong>scope</strong>)用于设置单实例还是多实例</p></li><li><p>scope 常用的两个属性值(还有比如 request，session 等)：</p><p>第一个值：默认值，<strong>singleton</strong>，表示单实例对象</p><p>第二个值：<strong>prototype</strong>，表示是多实例对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.collectiontype.Book&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCollection2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">    <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line">    <span class="comment">// book.test();</span></span><br><span class="line">    <span class="comment">// 地址不同 --&gt; 多实例对象</span></span><br><span class="line">    System.out.println(book1);  <span class="comment">// com.thr.spring5.collectiontype.Book@2641e737</span></span><br><span class="line">    System.out.println(book2);  <span class="comment">// com.thr.spring5.collectiontype.Book@727803de</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>singleton 和 prototype 区别</p><ul><li>singleton 单实例，prototype 多实例</li><li>设置 scope 值是 singleton 的时候，<strong>加载 spring 配置文件时候就会创建单实例对象</strong></li><li>设置 scope 值是 prototype 的时候，不是在加载 spring 配置文件时候创建单实例对象，而是在<strong>调用 getBean 方法的时候创建多实例对象</strong></li></ul></li></ul><p>（2）<strong>bean 的生命周期</strong></p><ul><li><p>生命周期</p><ul><li>从对象创建到对象销毁的过程</li></ul></li><li><p>bean 的生命周期步骤</p><ul><li><strong>通过构造器创建 bean 实例(无参构造)</strong></li><li><strong>为 bean 的属性设置值和对其它 bean 的引用(调用 set 方法)</strong></li><li><strong>调用 bean 的初始化的方法(需要进行配置初始化的方法)</strong></li><li><strong>bean 可以使用了(对象获取到了)</strong></li><li><strong>当容器关闭的时候，调用 bean 的销毁的方法(需要进行配置销毁的方法)</strong></li></ul></li><li><p>代码演示</p><ul><li><p>编写类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Orders</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一步: 执行无参构造创建 bean 实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOname</span><span class="params">(String oname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.oname = oname;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二步: 调用 set 方法设置属性值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行的初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第三步: 执行初始化的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建执行的销毁方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;第五步: 执行销毁的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 演示 bean 的生命周期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.bean.Orders&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;oname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;手机&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBean3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ApplicationContext context =</span></span><br><span class="line">    <span class="comment">// new ClassPathXmlApplicationContext(&quot;bean4.xml&quot;);</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean4.xml&quot;</span>);</span><br><span class="line">    <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;第四步: 获取创建的 bean 实例对象&quot;</span>);</span><br><span class="line">    System.out.println(orders);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动让 bean 实例销毁</span></span><br><span class="line">    <span class="comment">// ((ClassPathXmlApplicationContext) context).close();</span></span><br><span class="line">    context.close();  <span class="comment">// 上面改了的话, 这里就可以直接用了(因为原来的那个没有实现这个方法, 需要转换成其子类才行?)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>bean 的后置处理器(加上这个，&#x3D;&#x3D;bean 的生命周期一共有 7 步&#x3D;&#x3D;)</p><ul><li>通过构造器创建 bean 实例(无参构造)</li><li>为 bean 的属性设置值和对其它 bean 的引用(调用 set 方法)</li><li><strong>把 bean 实例传递 bean 后置处理器的方法(postProcessBeforeInitialization)</strong></li><li>调用 bean 的初始化的方法(需要进行配置初始化的方法)</li><li><strong>把 bean 实例传递 bean 后置处理器的方法(postProcessAfterInitialization)</strong></li><li>bean 可以使用了(对象获取到了)</li><li>当容器关闭的时候，调用 bean 的销毁的方法(需要进行配置销毁的方法)</li></ul></li><li><p>演示添加 后置处理器 的效果</p><ul><li><p>创建类，实现接口 BeanPostProcessor，创建后置处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPost</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之前执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在初始化之后执行的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置后置处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBeanPost&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.bean.MyBeanPost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-7-xml-自动装配"><a href="#2-7-xml-自动装配" class="headerlink" title="2.7 xml 自动装配"></a>2.7 xml 自动装配</h3><blockquote><p>基于 xml 自动装配用的少，一般是用注解</p></blockquote><p>（1）什么是自动装配</p><ul><li>根据指定装配规则(属性名称或者属性类型)，Spring 自动将匹配的属性值进行注入</li></ul><p>（2）演示自动装配的过程</p><ul><li><p>根据 属性名称(byName) 或者 属性类型(byType) 自动注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现自动装配</span></span><br><span class="line"><span class="comment">        bean 标签属性 autowire, 配置自动装配</span></span><br><span class="line"><span class="comment">        autowire 属性常用两个值:</span></span><br><span class="line"><span class="comment">            byName 根据属性名称注入 =&gt; 注入值 bean 的 id 值和类属性名称一样</span></span><br><span class="line"><span class="comment">            byType 根据属性类型注入 =&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.autowire.Emp&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外部 bean 注入对象属性（这里是手动装配） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.autowire.Dept&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-8-引入外部属性文件"><a href="#2-8-引入外部属性文件" class="headerlink" title="2.8 引入外部属性文件"></a>2.8 引入外部属性文件</h3><p>（1）直接配置数据库信息</p><ul><li><p>配置德鲁伊连接池</p></li><li><p>引入德鲁伊连接池依赖 jar 包</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1668928652449.png" alt="图2.8.1"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接配置连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;thr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>（2）引入外部属性文件配置数据库的连接池</p><ul><li><p>创建外部属性文件，properties 格式文件，写数据库信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prop.driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">prop.url</span>=<span class="string">jdbc:mysql://localhost:3306/hsp_db02</span></span><br><span class="line"><span class="attr">prop.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">prop.password</span>=<span class="string">thr</span></span><br></pre></td></tr></table></figure></li><li><p>把外部 properties 属性文件引入到 spring 配置文件中</p><ul><li><p>引入 context 名称空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 spring 配置文件使用标签引入外部属性文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2. 引入外部属性文件配置数据库连接池 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.1 引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.2 配置连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.driverClass&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-9-IOC-基于注解方式操作-Bean-管理"><a href="#2-9-IOC-基于注解方式操作-Bean-管理" class="headerlink" title="2.9 IOC 基于注解方式操作 Bean 管理"></a>2.9 IOC 基于注解方式操作 Bean 管理</h3><h4 id="2-9-1-注解"><a href="#2-9-1-注解" class="headerlink" title="2.9.1 注解"></a>2.9.1 注解</h4><p>（1）什么是注解</p><ul><li>注解是代码特殊标记</li><li>格式：@注解名称(属性名称&#x3D;属性值，属性名称&#x3D;属性值…..)</li></ul><p>（2）使用注解</p><ul><li>注解作用在类上面，方法上面，属性上面都可</li><li>使用注解目的：简化 xml 配置</li></ul><h4 id="2-9-2-创建对象"><a href="#2-9-2-创建对象" class="headerlink" title="2.9.2 创建对象"></a>2.9.2 创建对象</h4><blockquote><p>下面四个注解的功能是一样的，都可以用来创建 bean 实例</p></blockquote><p>（1）Spring 提供了四个注解</p><ul><li>&#x3D;&#x3D;@Component&#x3D;&#x3D;</li><li>&#x3D;&#x3D;@Service&#x3D;&#x3D;</li><li>&#x3D;&#x3D;@Controller&#x3D;&#x3D;</li><li>&#x3D;&#x3D;@Repository&#x3D;&#x3D;</li></ul><p>（2）基于注解方式实现对象的创建</p><ul><li><p>引入依赖</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1668929839937.png" alt="图2.9.2.1"></p></li><li><p>开启组件扫描</p><p>添加 context 名称空间，然后配置 xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 开启组件扫描</span></span><br><span class="line"><span class="comment">            1.1 如果要扫描多个包, 多个包之间用逗号隔开</span></span><br><span class="line"><span class="comment">            1.2 也可直接扫描包的上层目录 com.thr</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.thr.spring5.dao, com.thr.spring5.service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建类，在类上面创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在注解里面 value 属性值可以省略不写, 直接 @Component</span></span><br><span class="line"><span class="comment">// 默认值是首字母小写的类名称</span></span><br><span class="line"><span class="comment">// UserService  --&gt; userService</span></span><br><span class="line"><span class="meta">@Component(value = &quot;userService&quot;)</span>  <span class="comment">// 类似 &lt;bean id=&quot;userService&quot; class=&quot;..&quot; /&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        System.out.println(userService);  <span class="comment">// com.thr.spring5.service.UserService@53ca01a2</span></span><br><span class="line">        userService.add();  <span class="comment">// service add....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-9-3-组件扫描中的细节配置"><a href="#2-9-3-组件扫描中的细节配置" class="headerlink" title="2.9.3 组件扫描中的细节配置"></a>2.9.3 组件扫描中的细节配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 示例1:</span></span><br><span class="line"><span class="comment">         use-default-filters=&quot;false&quot; 表示现在不使用默认 filter, 自己配置 filter</span></span><br><span class="line"><span class="comment">         context:include-filter 设置扫描哪些内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.thr&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 说明只扫描带 Component 这个注解的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Component&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 示例2:</span></span><br><span class="line"><span class="comment">         下面这段配置扫描包的所有内容</span></span><br><span class="line"><span class="comment">         context:exclude-filter 设置哪些内容不进行扫描</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.thr&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 说明不扫描带 Controller 这个注解的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-9-4-注入属性"><a href="#2-9-4-注入属性" class="headerlink" title="2.9.4 注入属性"></a>2.9.4 注入属性</h4><p>（1）&#x3D;&#x3D;@Autowired&#x3D;&#x3D;：根据属性类型进行自动装配</p><ul><li><p>第一步：把 service 和 dao 对象创建，在 service 和 dao 类添加创建对象注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二步：在 service 注入 dao 对象，在 service 类添加 dao 类型属性，在属性上面使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 定义 dao 类型属性</span></span><br><span class="line">    <span class="comment">// 不需要添加 set 方法</span></span><br><span class="line">    <span class="comment">// 添加注入属性注解</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service add....&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 加载配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">    System.out.println(userService);  <span class="comment">// com.thr.spring5.service.UserService@53ca01a2</span></span><br><span class="line">    userService.add();  <span class="comment">// service add....  dao add...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）&#x3D;&#x3D;@Qualifier&#x3D;&#x3D;：根据属性名称进行注入</p><ul><li><p>这个注解的使用要和上面的 @Autowired 一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>  <span class="comment">// 根据类型进行注入</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span>  <span class="comment">// 根据属性名称注入(因为一个接口可能会有多个实现类)</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(value = &quot;userDaoImpl1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（3）&#x3D;&#x3D;@Resource&#x3D;&#x3D;：既可以根据类型注入，也可以根据名称注入</p><ul><li><p>因为是 javax(java 的扩展包) 中的，不是 spring 里头的，所以官方不推荐使用</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Resource  // 根据类型进行注入</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDaoImpl1&quot;)</span>  <span class="comment">// 根据名称进行注入</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure></li></ul><p>（4）&#x3D;&#x3D;@Value&#x3D;&#x3D;：注入普通类型属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(value = &quot;abc&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h4 id="2-9-5-完全注解开发"><a href="#2-9-5-完全注解开发" class="headerlink" title="2.9.5 完全注解开发"></a>2.9.5 完全注解开发</h4><p>（1）创建配置类，替代 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">// 作为配置类, 替代 xml 配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.thr&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testService2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 加载配置类</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到对象</span></span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    System.out.println(userService);  <span class="comment">// com.thr.spring5.service.UserService@53ca01a2</span></span><br><span class="line">    userService.add();  <span class="comment">// service add....  dao add...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-AOP"><a href="#3-AOP" class="headerlink" title="3. AOP"></a>3. AOP</h2><h3 id="3-1-AOP-基本概念"><a href="#3-1-AOP-基本概念" class="headerlink" title="3.1 AOP 基本概念"></a>3.1 AOP 基本概念</h3><p>（1）什么是 AOP</p><ul><li><p><strong>面向切面(方面)编程</strong>，利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<strong>耦合度</strong>降低，提高程序的可重用性，同时提高了开发的效率</p></li><li><p>通俗描述：不通过修改源代码的方式，在主干功能里添加新的功能，使用登录的例子说明如下，</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669529408161.png" alt="图3.1.1"></p></li></ul><h3 id="3-2-AOP-底层原理"><a href="#3-2-AOP-底层原理" class="headerlink" title="3.2 AOP 底层原理"></a>3.2 AOP 底层原理</h3><h4 id="3-2-1-AOP-底层使用动态代理"><a href="#3-2-1-AOP-底层使用动态代理" class="headerlink" title="3.2.1 AOP 底层使用动态代理"></a>3.2.1 AOP 底层使用动态代理</h4><p>（1）有两种情况动态代理</p><ul><li><p>有接口情况，使用 &#x3D;&#x3D;<strong>JDK 动态代理</strong>&#x3D;&#x3D;</p><p>创建接口<strong>实现类代理对象</strong>，增强类的方法</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669529883264.png" alt="图3.2.1.1"></p></li><li><p>没有接口情况，使用 &#x3D;&#x3D;<strong>CGLIB 动态代理</strong>&#x3D;&#x3D;</p><p>创建当前类<strong>子类的代理对象</strong>，增强类的方法</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669530035956.png" alt="图3.2.1.2"></p></li></ul><p>（2）JDK 动态代理实现思路</p><ul><li><p>使用 JDK 动态代理，使用 <strong>Proxy 类</strong>里面的方法创建代理对象</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669530348925.png" alt="图3.2.1.3"></p></li><li><p>调用 <strong>newProxyInstance</strong> 方法：三个参数</p><p>第一个参数：ClassLoader  类加载器</p><p>第二个参数：Interface  增强方法所在的类，这个类实现的接口，支持多个接口</p><p>第三个参数：InvocationHandler  实现这个接口，创建代理对象，写增强的方法</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669530414575.png" alt="图3.2.1.4"></p></li></ul><h4 id="3-2-2-编写-JDK-动态代理代码"><a href="#3-2-2-编写-JDK-动态代理代码" class="headerlink" title="3.2.2 编写 JDK 动态代理代码"></a>3.2.2 编写 JDK 动态代理代码</h4><p>（1）创建接口，定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建接口的实现类，实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）使用 Proxy 类创建接口代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建接口实现类的代理对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.1 第二个参数: 我要实现的接口(数组类型?)</span></span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2 第一个参数: 类加载器  第三个参数: 接口(可用匿名内部类的方法写, 如下)</span></span><br><span class="line">        <span class="comment">/*Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span></span><br><span class="line"><span class="comment">                return null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">UserDaoImpl</span> <span class="variable">useDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.3 第三个参数不用匿名内部类的形式创建</span></span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">dao</span> <span class="operator">=</span> (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(useDao));</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> dao.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建的是谁的代理对象, 把谁传递过来</span></span><br><span class="line">    <span class="comment">// 有参构造传递</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增强的逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前执行...&quot;</span> + method.getName() + <span class="string">&quot; :传递的参数...&quot;</span> + Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 被增强的方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后执行...&quot;</span> + obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 方法之前执行...add :传递的参数...[1, 2]</span></span><br><span class="line"><span class="comment">// add 方法执行了...</span></span><br><span class="line"><span class="comment">// 方法之后执行...com.thr.spring5.UserDaoImpl@2b193f2d</span></span><br></pre></td></tr></table></figure><h3 id="3-3-AOP-操作术语"><a href="#3-3-AOP-操作术语" class="headerlink" title="3.3 AOP 操作术语"></a>3.3 AOP 操作术语</h3><p>（1）<strong>连接点</strong></p><ul><li>类里面的哪些方法可以被增强，这些方法称为连接点</li></ul><p>（2）<strong>切入点</strong></p><ul><li>实际被真正增强的方法，称为切入点</li></ul><p>（3）<strong>通知(增强)</strong></p><ul><li>实际增强的逻辑部分称为通知(增强)</li><li>通知有多种类型<ul><li>前置通知</li><li>后置通知</li><li>环绕通知</li><li>异常通知</li><li>最终通知(类似 finally)</li></ul></li></ul><p>（4）<strong>切面</strong></p><ul><li>是动作，把通知应用到切入点的过程</li></ul><h3 id="3-4-AOP-操作-准备工作"><a href="#3-4-AOP-操作-准备工作" class="headerlink" title="3.4 AOP 操作-准备工作"></a>3.4 AOP 操作-准备工作</h3><p>（1）Spring 框架一般基于 <strong>AspectJ</strong> 实现 AOP 操作</p><ul><li>AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spring 框架一起使用，进行 AOP 操作</li></ul><p>（2）<strong>基于 AspectJ 实现 AOP 操作</strong></p><ul><li>基于 xml 配置文件</li><li>基于注解方式实现(一般使用注解)</li></ul><p>（3）在项目工程里引入 AOP 相关依赖</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669601567681.png" alt="图3.4.1"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669602121122.png" alt="图3.4.2"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669602149987.png" alt="图3.4.3"></p><p>（4）<strong>切入点表达式</strong></p><ul><li><p>作用：知道对哪个类里面的哪个方法进行增强</p></li><li><p>语法结构：&#x3D;&#x3D;execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))&#x3D;&#x3D;</p></li><li><p>举例1：对 com.thr.dao.BookDao 类里面的 add 方法进行增强(两个点表示参数列表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.thr.dao.BookDao.add(..))</span><br></pre></td></tr></table></figure></li><li><p>举例2：对 com.thr.dao.BookDao 类里面的 所有 方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.thr.dao.BookDao.*(..))</span><br></pre></td></tr></table></figure></li><li><p>举例3：对 com.thr.dao 包里面的 所有 类，类里面的所有方法进行增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution(* com.thr.dao.*.*(..))</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-5-AOP-操作-AspectJ-注解"><a href="#3-5-AOP-操作-AspectJ-注解" class="headerlink" title="3.5 AOP 操作(AspectJ 注解)"></a>3.5 AOP 操作(AspectJ 注解)</h3><h4 id="3-5-1-基于注解操作步骤"><a href="#3-5-1-基于注解操作步骤" class="headerlink" title="3.5.1 基于注解操作步骤"></a>3.5.1 基于注解操作步骤</h4><p>（1）创建类，在类里面定义方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建增强类(编写增强逻辑)</p><ul><li><p>在增强类里面，创建方法，让不同方法代表不同的通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（3）进行通知的配置</p><ul><li><p>在 spring 的配置文件中，配置名称空间，开启注解扫描(可以写个类，也可以写个配置文件)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.thr.spring5.aopAnnotation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用注解创建 User 和 UserProxy 对象 </p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669603491020.png" alt="图3.5.1.1"></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669603518559.png" alt="图3.5.1.2"></p></li><li><p>在增强类上面添加注解 @Aspect</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669603581738.png" alt="图3.5.1.3"></p></li><li><p>在 spring 配置文件中开启生成代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启 AspectJ 生成代理对象 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 有了这句话, 它就会去找我们上面有 @Aspect 注解的类, 自动给这个类生成代理对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置不同类型的通知</p><ul><li><p>在增强类里面，在作为通知的方法上面添加通知类型的注解，并使用切入点表达式配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 前置通知</span></span><br><span class="line">    <span class="comment">// @Before 注解, 表示作为前置通知, 即在我的增强方法的前面执行</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.thr.spring5.aopAnnotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 最终通知 after 表示在我的方法执行之后执行(即便有异常也会执行) 无论正常异常都会执行</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* com.thr.spring5.aopAnnotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 后置(返回)通知  afterReturning 表示在返回值之后执行 只有正常返回才会执行</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.thr.spring5.aopAnnotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 异常通知  有异常才执行</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.thr.spring5.aopAnnotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 环绕通知(方法之前和之后都执行)</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.thr.spring5.aopAnnotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之前...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 被增强的方法执行</span></span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕之后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从Spring5.2.7开始，改成了根据其类型按照从高到低的优先级进行执行：@Around @Before @After @AfterReturning @AfterThrowing</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAopAnnotation</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 加载配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 user 中的 add 方法</span></span><br><span class="line">    user.add();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    环绕之前...</span></span><br><span class="line"><span class="comment">    before...</span></span><br><span class="line"><span class="comment">    add....</span></span><br><span class="line"><span class="comment">    环绕之后...</span></span><br><span class="line"><span class="comment">    after...</span></span><br><span class="line"><span class="comment">    afterReturning...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-5-2-基于注解操作细节"><a href="#3-5-2-基于注解操作细节" class="headerlink" title="3.5.2 基于注解操作细节"></a>3.5.2 基于注解操作细节</h4><p>（1）相同的切入点抽取(用注解 @Pointcut)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相同的切入点进行抽取</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.thr.spring5.aopAnnotation.User.add(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointDemo</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 前置通知</span></span><br><span class="line"><span class="comment">// @Before 注解, 表示作为前置通知, 即在我的增强方法的前面执行</span></span><br><span class="line"><span class="meta">@Before(value = &quot;pointDemo()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）若有多个增强类对同一个方法进行增强，可以设置增强类优先级</p><ul><li>在增强类的上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonProxy</span> &#123;</span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.thr.spring5.aopAnnotation.User.add(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">personBefore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;personBefore...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）<strong>完全使用注解开发</strong></p><ul><li><p>创建配置类，不需要创建 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完全注解开发</span></span><br><span class="line"><span class="meta">@Configuration</span>  <span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.thr&quot;&#125;)</span>  <span class="comment">// 开启组件扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span>  <span class="comment">// 开启 Aspect 生成代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigAop</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-6-AOP-操作-AspectJ-配置文件"><a href="#3-6-AOP-操作-AspectJ-配置文件" class="headerlink" title="3.6 AOP 操作(AspectJ 配置文件)"></a>3.6 AOP 操作(AspectJ 配置文件)</h3><blockquote><p>了解即可(一般不用)</p></blockquote><p>（1）创建两个类，增强类和被增强类，创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）在 spring 配置文件中创建两个类对象</p><p>（3）在 spring 配置文件中配置切入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. 创建对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;book&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.aopxml.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.thr.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 配置 aop 增强 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.1 切入点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;p&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.thr.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 2.2 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;bookProxy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 增强作用在具体的方法上, 此处表示把 before 方法 作用在 buy 方法之前 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;p&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAopXml</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 加载配置文件</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到对象</span></span><br><span class="line">    <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;book&quot;</span>, Book.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 user 中的 add 方法</span></span><br><span class="line">    book.buy();  <span class="comment">// 结果: before..  buy....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-JdbcTemplate"><a href="#4-JdbcTemplate" class="headerlink" title="4. JdbcTemplate"></a>4. JdbcTemplate</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>（1）什么是 JdbcTemplate？</p><ul><li>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 可以方便实现对数据库的操作</li></ul><p>（2）准备工作</p><ul><li><p>引入相关 jar 包</p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669883328152.png" alt="图4.1.1"></p></li><li><p>在 spring 配置文件中配置数据库连接池</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///spring_db?characterEncoding=utf8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;thr&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 JdbcTemplate 对象，注入 DataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JdbcTemplate 对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;JdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入 dataSource(用 set 方法注入) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建 service 类，创建 dao 类，在 dao 注入 jdbcTemplate 对象(&#x3D;&#x3D;<strong>service层要用dao层的东西 所以需要注入dao对象 dao层需要连接池来连接数据库 所以要注入 jdbcTemplate 对象</strong>&#x3D;&#x3D;)</p><ul><li><p>配置文件中开启组件扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启组件扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.thr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>service 里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>  <span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">// 注入 dao</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Dao 里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="comment">// 注入 JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-2-操作数据库-添加功能"><a href="#4-2-操作数据库-添加功能" class="headerlink" title="4.2 操作数据库-添加功能"></a>4.2 操作数据库-添加功能</h3><p>（1）<strong>对于数据库的表创建实体类</strong></p><p><img src="/../img/Spring%E6%A1%86%E6%9E%B6.assets/1669885389835.png" alt="图4.2.1"></p><p>（2）<strong>编写 service 和 dao</strong></p><ul><li>在 dao 里进行数据库添加操作</li><li>调用 JdbcTemplate 对象里面 update 方法实现添加操作<ul><li>有两个参数，第一个参数：sql 语句；第二个参数：可变参数，设置 sql 语句值</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/2023/11/18/MyBatis/"/>
      <url>/2023/11/18/MyBatis/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MyBatis"><a href="#一、MyBatis" class="headerlink" title="一、MyBatis"></a>一、MyBatis</h2><h3 id="1-MyBatis-简介"><a href="#1-MyBatis-简介" class="headerlink" title="1. MyBatis 简介"></a>1. MyBatis 简介</h3><h4 id="1-1-MyBatis-历史"><a href="#1-1-MyBatis-历史" class="headerlink" title="1.1 MyBatis 历史"></a>1.1 MyBatis 历史</h4><ul><li><p><strong>MyBatis</strong> 本是 Apache 的一个开源项目 <strong>iBatis</strong>，2010年这个项目由 Apache Software Foundation 迁移到了 Google Code，并且改名为 MyBatis 。代码于2013年11月迁移 Github。</p></li><li><p>iBatis 一词来源于 “internet” 和 “abatis” 的组合，是一个<strong>基于Java的持久层框架</strong>。iBatis 提供的持久层框架包括 <strong>SQL Maps</strong>(sql 映射) 和 <strong>Data Access Objects</strong>（DAO）。</p></li></ul><h4 id="1-2-MyBatis-特性"><a href="#1-2-MyBatis-特性" class="headerlink" title="1.2 MyBatis 特性"></a>1.2 MyBatis 特性</h4><ul><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis <strong>避免</strong>了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的<strong>XML</strong>或<strong>注解</strong>用于配置和原始映射，将接口和 Java 的 <strong>POJO（Plain Old Java Objects，普通的 Java 对象）</strong>映射成数据库中的记录</li><li>MyBatis 是一个 <strong>半自动的ORM</strong>（Object Relation Mapping 对象关系[关系型数据库]映射）框架</li></ul><h4 id="1-3-MyBatis-下载"><a href="#1-3-MyBatis-下载" class="headerlink" title="1.3 MyBatis 下载"></a>1.3 MyBatis 下载</h4><ul><li>下载地址：<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></li></ul><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1669881015705.png" alt="图1.3.1"></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1670076569225.png" alt="图1.3.2"></p><h4 id="1-4-和其它的持久层技术对比"><a href="#1-4-和其它的持久层技术对比" class="headerlink" title="1.4 和其它的持久层技术对比"></a>1.4 和其它的持久层技术对比</h4><ul><li><strong>JDBC</strong><ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li><strong>Hibernate 和 JPA</strong><ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li><strong>MyBatis</strong><ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。<strong>Java代码专注业务、SQL语句专注数据</strong></li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h3 id="2-搭建-MyBatis"><a href="#2-搭建-MyBatis" class="headerlink" title="2. 搭建 MyBatis"></a>2. 搭建 MyBatis</h3><h4 id="2-1-开发环境"><a href="#2-1-开发环境" class="headerlink" title="2.1 开发环境"></a>2.1 开发环境</h4><ul><li>IDE：idea 2020.3.2</li><li>构建工具：maven 3.6.1</li><li>MySQL版本：MySQL 5.7.19</li><li>MyBatis版本：MyBatis 3.5.10</li></ul><blockquote><p>MySQL 不同版本注意事项</p><p>1、 驱动类 driver-class-name</p><p>MySQL 5 版本使用 jdbc5 驱动，驱动类使用：com.mysql.jdbc.Driver</p><p>MySQL 8 版本使用 jdbc8 驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p><p>2、连接地址 url</p><p>MySQL 5 版本的 url：</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm</p><p>MySQL 8 版本的 url：</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?serverTimezone&#x3D;UTC</p><p>否则报错</p></blockquote><h4 id="2-2-创建-maven-工程"><a href="#2-2-创建-maven-工程" class="headerlink" title="2.2 创建 maven 工程"></a>2.2 创建 maven 工程</h4><p>（1）empty project?然后直接新建模块(module)?</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1670113569083.png" alt="图2.2.1"></p><p>（2）<strong>打包方式 –&gt; jar</strong>(在 pom.xml 中)</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1670113654328.png" alt="图2.2.2"></p><p>（3）导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--因为我的maver库李MySQL版本为5.1.3所以我的版本号为5.1.3 根据自身版本修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）创建数据库和表</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1670114147444.png" alt="图2.2.3"></p><p>（5）创建对应的实体类</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1670114414801.png" alt="图2.2.4"></p><h4 id="2-3-创建-MyBatis-的核心配置文件夹"><a href="#2-3-创建-MyBatis-的核心配置文件夹" class="headerlink" title="2.3 创建 MyBatis 的核心配置文件夹"></a>2.3 创建 MyBatis 的核心配置文件夹</h4><blockquote><p>习惯上命名为 <strong>mybatis-config.xml</strong>，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以操作时可以直接复制、粘贴。</p><p><strong>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</strong>(设置如何连接数据库，而 MyBatis 的映射文件是设置如何操作数据库)</p><p>核心配置文件<strong>存放的位置是 src&#x2F;main&#x2F;resources 目录</strong>下</p><p>核心配置文件的内容可以从mybatis的官方文档中的 Getting Started 获得</p></blockquote><p>（1）官方文档中找配置文件里要写的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接数据库的环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                           useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;thr&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 mybatis 的映射文件(映射文件里头写的是 sql 语句) </span></span><br><span class="line"><span class="comment">            通过读取核心配置文件来获取一个操作数据库的对象, 就可以直接执行 sql</span></span><br><span class="line"><span class="comment">            而 sql 语句在映射文件中, 所以要把映射文件配置到核心配置文件中, </span></span><br><span class="line"><span class="comment">            才可以通过加载核心配置文件去找到对应映射文件中的 sql 去执行以便实现效果 </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1670336511797.png" alt="图2.3.1"></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672366373796.png" alt="图2.3.2"></p><h4 id="2-4-创建-mapper-接口"><a href="#2-4-创建-mapper-接口" class="headerlink" title="2.4 创建 mapper 接口"></a>2.4 创建 mapper 接口</h4><blockquote><p>MyBatis 中的 mapper 接口相当于以前的dao，但是区别在于，<strong>mapper仅仅是接口，我们不需要提供实现类</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建一个 mapper 接口(不用实现类) --&gt; mapper 接口中的一个方法对应映射文件的一个 sql 语句</span></span><br><span class="line"><span class="comment">    即可通过 mybatis 里头的一些功能来为它创建一个代理实现类</span></span><br><span class="line"><span class="comment">    当我们去调用接口里的方法时, 就可以直接对应一个 sql 语句并执行该语句</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    接口的起名规则: 我们所操作的表叫 t_user, 表当前对应的实体类叫 User 类,</span></span><br><span class="line"><span class="comment">                    所以当前的 mapper 接口就叫 UserMapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        实现添加功能的方法</span></span><br><span class="line"><span class="comment">        返回值: 增删改的返回值是固定的, 是受影响的行数, 故返回值设为 int 型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-创建-MyBatis-的映射文件"><a href="#2-5-创建-MyBatis-的映射文件" class="headerlink" title="2.5 创建 MyBatis 的映射文件"></a>2.5 创建 MyBatis 的映射文件</h4><p>&#x3D;&#x3D;关系梳理：&#x3D;&#x3D;</p><ul><li>&#x3D;&#x3D;一张表 ——&gt; 实体类 —-&gt; 对应当前的mapper接口—-&gt;对应一个映射文件&#x3D;&#x3D;</li><li>&#x3D;&#x3D;mapper接口中的方法 —&gt; 对应映射文件中的SQL语句&#x3D;&#x3D;</li></ul><p><strong>相关概念</strong>：<strong>ORM</strong>（<strong>O</strong>bject <strong>R</strong>elationship <strong>M</strong>apping）对象关系映射。</p><ul><li><p>对象：Java的实体类对象</p></li><li><p>关系：关系型数据库</p></li><li><p>映射：二者之间的对应关系</p></li></ul><table><thead><tr><th><strong>Java概念</strong></th><th><strong>数据库概念</strong></th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段 &#x2F; 列</td></tr><tr><td>对象</td><td>记录 &#x2F; 行</td></tr></tbody></table><blockquote><p>1、映射文件的命名规则</p><p><strong>表所对应的实体类的类名+Mapper.xml</strong></p><p>例如：<strong>表</strong> t_user，映射的实体<strong>类</strong>为 User，所对应的<strong>映射文件</strong>为 UserMapper.xml，<strong>mapper 接口</strong>就叫 UserMapper</p><p><strong>因此一个映射文件对应一个实体类，对应一张表的操作</strong></p><p>MyBatis 映射文件用于编写 SQL，访问以及操作表中的数据</p><p>2、MyBatis 中可以面向接口操作数据，要保证两个一致</p><p>(1) mapper 接口的全类名和映射文件的命名空间（namespace）保持一致</p><p>(2) mapper 接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p><p>3、<strong>映射文件的内容同样可以从官方文档</strong>的 Getting Started 中获得（第四页）</p></blockquote><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1670385439032.png" alt="图2.5.1"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 映射文件里头写 sql 语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.thr.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        mapper 接口和映射文件需保证两个一致：</span></span><br><span class="line"><span class="comment">        1、mapper 接口的 全类名 和 映射文件 的 namespace 保持一致</span></span><br><span class="line"><span class="comment">        2、mapper 接口中方法的方法名和映射文件中 sql 的 id属性 保持一致</span></span><br><span class="line"><span class="comment">            (建议把 mapper 接口中的方法复制一份到所写的对应的 sql 语句上方)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       保证两个一致后, 当我们调用 mapper 接口中的方法时, 就会根据当前 mapper 接口的全类名来找到咱们的映射文件,</span></span><br><span class="line"><span class="comment">        并且根据我们当前调用的方法的方法名来找到 sql 语句, 来获取这个标签中的 sql 并执行该 sql</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- int insertUser(); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into ssm.t_user values(null, &#x27;admin&#x27;, &#x27;123456&#x27;, 23, &#x27;男&#x27;, &#x27;1234@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672383994244.png" alt="图2.5.2"></p><p>然后修改 mybatis-config.xml 中引入映射文件的路径 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-通过-junit-测试功能"><a href="#2-6-通过-junit-测试功能" class="headerlink" title="2.6 通过 junit 测试功能"></a>2.6 通过 junit 测试功能</h4><p>（1）创建测试类</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672384450032.png" alt="图2.6.1"></p><ul><li>概念补充：<ul><li>&#x3D;&#x3D;SqlSession&#x3D;&#x3D;：代表<strong>Java程序和数据库之间的会话</strong>（HttpSession是Java程序和浏览器之间的会话）</li><li>&#x3D;&#x3D;SqlSessionFactory&#x3D;&#x3D;：是 “生产” SqlSession的 “工厂”</li><li>&#x3D;&#x3D;工厂模式&#x3D;&#x3D;：如果创建某一个对象，使用的<strong>过程基本固定</strong>，那么我们就<strong>可以把创建这个对象的相关代码封装到一个 “工厂类” 中</strong>，以后都<strong>使用这个工厂类来 “生产” 我们需要的对象</strong></li></ul></li><li>代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取核心配置文件的输入流(读的功能), 注意此处的 Resources 是 org.apache.ibatis.io 里的</span></span><br><span class="line">        <span class="comment">// Resources.getResourceAsStream 用于获取当前的某一个文件(这里是核心配置文件)所对应的字节输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 sqlSessionFactoryBuilder 对象</span></span><br><span class="line">        <span class="comment">// 用于构建一个 SqlSessionFactory, 而 SqlSessionFactory 是一个工厂对象, 使用的是工厂模式, 能够为我们提供 SqlSession 对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 SqlSessionFactory 对象(通过 build 方法, 根据核心配置文件所对应的输入流来创建所对应的对象)</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 sql 的会话对象 SqlSession, 是 MyBatis 提供的操作数据库的对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 重点！(因为一个 mapper 接口不能直接创建对象, 所以通过代理模式创建当前 mapper 接口的代理实现类, 并且自动找到对应的 sql 语句去执行)</span></span><br><span class="line">        <span class="comment">// 获取 UserMapper 的代理实现类对象(代理模式 --&gt; 帮助创建了 mapper 接口的代理实现类), 返回当前接口的实现类的对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 mapper 接口中的方法, 实现添加用户信息的功能</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser();</span><br><span class="line">        System.out.println(<span class="string">&quot;结果: &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭会话 sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优化(<strong>自动提交事务</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取核心配置文件的输入流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取SqlSessionFactory对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">build</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取SQL的会话对象SqlSession()不会自动提交事务,是MyBatis提供的操作数据库的对象</span></span><br><span class="line"><span class="comment">//SqlSession sqlSession = build.openSession();</span></span><br><span class="line"><span class="comment">//获取SQL的会话对象SqlSession(true)会自动提交事务,是MyBatis提供的操作数据库的对象</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> build.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点！(因为一个 mapper 接口不能直接创建对象, 所以通过代理模式创建当前 mapper 接口的代理实现类, 并且自动找到对应的 sql 语句去执行)</span></span><br><span class="line"><span class="comment">// 获取 UserMapper 的代理实现类对象(代理模式 --&gt; 帮助创建了 mapper 接口的代理实现类), 返回当前接口的实现类的对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 mapper 接口中的方法, 实现添加用户信息的功能</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser();</span><br><span class="line">System.out.println(<span class="string">&quot;结果: &quot;</span> + result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //演示不用 mapper 接口时(用的不多)</span></span><br><span class="line"><span class="comment">//        // 通过 sql 语句的唯一标识找到 sql 并执行, 唯一标识是 namespace.sqlId</span></span><br><span class="line"><span class="comment">//        int result1 = sqlSession.insert(&quot;com.thr.mybatis.mapper.UserMapper.insertUser&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;结果:&quot; + result1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭会话 sqlSession</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure></li></ul><p>（2）测试</p><ul><li><p>SQLyog 中右键点击表名，在 更多表操作中选择 <strong>截断表</strong></p><blockquote><p><strong>截断和清空的区别</strong>：</p><p>清空：把表中的数据删除</p><p>截断：其底层是先将表删掉，再重新创建一个一模一样的表，故 id 会从一开始自增 (截断很危险，其不支持事务，执行了不能回滚)</p></blockquote><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672415508054.png" alt="图2.6.2"></p></li><li><p>执行成功</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672415765414.png" alt="图2.6.3"></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672415752389.png" alt="图2.6.4"></p></li></ul><h4 id="2-7-加入-log4j-日志功能"><a href="#2-7-加入-log4j-日志功能" class="headerlink" title="2.7 加入 log4j 日志功能"></a>2.7 加入 log4j 日志功能</h4><ul><li><p><strong>加入依赖</strong>，在 pom.xml 里添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>加入 log4j(日志框架) 的配置文件</strong></p><blockquote><p>log4j 的配置文件为 <strong>log4j.xml</strong>，存放位置是 <strong>src&#x2F;main&#x2F;resources</strong> 目录下</p></blockquote><p>注：报错提示 URI 未注册 可以不用管 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>日志的级别</strong></p><p>FATAL(致命) &gt; ERROR(错误) &gt; WARN(警告) &gt; INFO(信息) &gt; DEBUG(调试) </p><p>从左到右打印的内容越来越详细，故当我们选择了一个级别后，打印的是大于等于当前这个日志级别的日志信息(我们这里选的是 debug)</p></blockquote></li><li><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG <span class="number">12</span>-<span class="number">31</span> <span class="number">00</span>:08:<span class="number">52</span>,<span class="number">243</span> ==&gt;  Preparing: insert into ssm.t_user <span class="title function_">values</span><span class="params">(<span class="literal">null</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;1234@qq.com&#x27;</span>)</span> (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">12</span>-<span class="number">31</span> <span class="number">00</span>:08:<span class="number">52</span>,<span class="number">281</span> ==&gt; Parameters:  (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">DEBUG <span class="number">12</span>-<span class="number">31</span> <span class="number">00</span>:08:<span class="number">52</span>,<span class="number">293</span> &lt;==    Updates: <span class="number">1</span> (BaseJdbcLogger.java:<span class="number">137</span>) </span><br><span class="line">结果: <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-MyBatis-的-增-删改查"><a href="#3-MyBatis-的-增-删改查" class="headerlink" title="3. MyBatis 的(增)删改查"></a>3. MyBatis 的(增)删改查</h3><h4 id="3-1-创建工具类"><a href="#3-1-创建工具类" class="headerlink" title="3.1 创建工具类"></a>3.1 创建工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 获取核心配置文件的输入流(捕获异常 ctrl + alt + t, 选择第六个 try/catch)</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 获取 sqlSessionFactoryBuilder 对象</span></span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 获取 sqlSessionFactory 对象</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 获取 sqlSession 对象(自动提交事务)</span></span><br><span class="line">            sqlSession = sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-Update"><a href="#3-2-Update" class="headerlink" title="3.2 Update"></a>3.2 Update</h4><ul><li><p><strong>在 mapper 接口中创建方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户信息</span></span><br><span class="line"><span class="comment">     * 返回值: 增删改的返回值是固定的, 是受影响的行数, 故返回值设为 int 型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在映射文件中写对应的 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.thr.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- int insertUser(); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into ssm.t_user values(null, &#x27;admin&#x27;, &#x27;123456&#x27;, 23, &#x27;男&#x27;, &#x27;1234@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- void updateUser(); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">        update ssm.t_user set username=&#x27;root&#x27;, password=&#x27;123&#x27; where id = 3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 修改用户信息(用工具类实现)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 通过工具类先获取 sqlSession 对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 获取 mapper 接口的代理实现类对象, 直接调用接口中的方法即可</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.updateUser();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 关闭 sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-3-Delete"><a href="#3-3-Delete" class="headerlink" title="3.3 Delete"></a>3.3 Delete</h4><ul><li><p><strong>在 mapper 接口中创建方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>在映射文件中写对应的 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void deleteUser(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">    delete from ssm.t_user where id = 4</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 删除用户信息(用工具类实现)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.deleteUser();</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-4-Retrieve"><a href="#3-4-Retrieve" class="headerlink" title="3.4 Retrieve"></a>3.4 Retrieve</h4><p>（1）&#x3D;&#x3D;查询单个用户信息(根据用户 id)&#x3D;&#x3D;</p><ul><li><p><strong>在 mapper 接口中创建方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 id 查询用户信息</span></span><br><span class="line"><span class="comment"> * 返回一个对象(只查询一条用户信息)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>在映射文件中写对应的 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 由于返回值是一个对象, 所以要写 resultType/resultMap,</span></span><br><span class="line"><span class="comment">         因为当前的字段名和属性名完全相同, 故此处直接选 resultType 即可</span></span><br><span class="line"><span class="comment">           resultType: 设置结果类型, 即查询的数据要转换为的 java 类型(此处要写全类名)</span></span><br><span class="line"><span class="comment">           resultMap: 自定义映射, 处理多对一或一对多的映射关系</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- User getUserById(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.thr.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from ssm.t_user where id = 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>此处若没写 resultType，测试时会报错如下：</p><p>报错信息：<strong>A query was run and no Result Maps</strong> were found for the Mapped Statement ‘com.thr.mybatis.mapper.UserMapper.getUserById’. </p><p> It’s likely that <strong>neither a Result Type nor a Result Map</strong> was specified.</p></blockquote></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 查询用户信息(用工具类实现)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 结果: User&#123;id=1, username=&#x27;admin&#x27;, password=&#x27;123456&#x27;, age=23, gender=&#x27;男&#x27;, email=&#x27;1234@qq.com&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）&#x3D;&#x3D;查询所有用户信息&#x3D;&#x3D;</p><ul><li><p><strong>在 mapper 接口中创建方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有的用户信息</span></span><br><span class="line"><span class="comment"> * 返回一个对象集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>在映射文件中写对应的 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 先转换为实体类对象后再放到集合里头 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- List&lt;User&gt; getAllUser(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.thr.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from ssm.t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 查询所有用户信息(用工具类实现)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; list = mapper.getAllUser();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环输出(这写法???!)</span></span><br><span class="line">    <span class="comment">// System.out::println 等价于 x -&gt; &#123; System.out.println(x) &#125;</span></span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 结果:</span></span><br><span class="line"><span class="comment">            User&#123;id=1, username=&#x27;admin&#x27;, password=&#x27;123456&#x27;, age=23, gender=&#x27;男&#x27;, email=&#x27;1234@qq.com&#x27;&#125;</span></span><br><span class="line"><span class="comment">            User&#123;id=2, username=&#x27;admin&#x27;, password=&#x27;123456&#x27;, age=23, gender=&#x27;男&#x27;, email=&#x27;1234@qq.com&#x27;&#125;</span></span><br><span class="line"><span class="comment">            User&#123;id=3, username=&#x27;root&#x27;, password=&#x27;123&#x27;, age=23, gender=&#x27;男&#x27;, email=&#x27;1234@qq.com&#x27;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-MyBatis-的核心配置文件详解"><a href="#4-MyBatis-的核心配置文件详解" class="headerlink" title="4. MyBatis 的核心配置文件详解"></a>4. MyBatis 的核心配置文件详解</h3><h4 id="4-1-environments-标签"><a href="#4-1-environments-标签" class="headerlink" title="4.1 environments 标签"></a>4.1 environments 标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments: 配置连接数据库的环境</span></span><br><span class="line"><span class="comment">        属性: default: 设置默认使用的环境的 id (这里是 development 开发环境)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            environment: 设置一个具体的连接数据库的环境</span></span><br><span class="line"><span class="comment">            属性: id: 设置环境的唯一标识(即不能重复)</span></span><br><span class="line"><span class="comment">            其拥有两个子标签:</span></span><br><span class="line"><span class="comment">                transactionManager: 事务管理器(设置数据库的管理方式)</span></span><br><span class="line"><span class="comment">                dataSource: 数据源</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接数据库的环境(此处是开发环境) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                 transactionManager: 设置事务管理器</span></span><br><span class="line"><span class="comment">                 属性: type: 设置事务管理的方式 type=&quot;JDBC/MANAGED&quot;</span></span><br><span class="line"><span class="comment">                            JDBC: 表示使用 JDBC 中原生的事务管理方式</span></span><br><span class="line"><span class="comment">                            MANAGED: 被管理, 例如 Spring 管理事务</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource: 设置数据源</span></span><br><span class="line"><span class="comment">                属性: type: 设置数据源的类型 type=&quot;POOLED/UNPOOLED/JNDI&quot;</span></span><br><span class="line"><span class="comment">                            POOLED: 表示使用数据库连接池(创建完连接后交给连接池管理, 下一次创建连接时直接从连接池里获取就行)</span></span><br><span class="line"><span class="comment">                            UNPOOLED: 表示不使用数据库连接池(每次获取都是重新获取/重新创建连接)</span></span><br><span class="line"><span class="comment">                            JNDI: 表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                                        useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;thr&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接数据库的环境(此处是测试环境) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                                        useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;thr&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-properties-标签"><a href="#4-2-properties-标签" class="headerlink" title="4.2 properties 标签"></a>4.2 properties 标签</h4><ul><li><p><strong>新建一个 properties 文件</strong></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672503199775.png" alt="图4.2.1"></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672503232875.png" alt="图4.2.2"></p></li><li><p><strong>编写配置文件</strong></p><blockquote><p>因为xml解析转移的原因，<code>&amp;amp;</code> 都改成 &amp; </p><p><strong>注意：useSSL&#x3D;false 需写在最前面！！！</strong></p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?useSSL=false&amp;serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">thr</span></span><br></pre></td></tr></table></figure></li><li><p>将 <strong>配置文件</strong>(jdbc.properties) <strong>引入到核心配置文件</strong>(mybatis-config.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 properties 文件, 此后就可以在当前文件中使用 $&#123;key&#125; 的方式访问 value --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-typeAliases-标签"><a href="#4-3-typeAliases-标签" class="headerlink" title="4.3 typeAliases 标签"></a>4.3 typeAliases 标签</h4><ul><li><p>配置文件里头进行配置</p><blockquote><p><strong>MyBatis 核心配置文件中的标签必须按照指定的顺序配置</strong>：            properties?,settings?,typeAliases?,typeHandlers?,         objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        MyBatis 核心配置文件中的标签必须按照指定的顺序配置:</span></span><br><span class="line"><span class="comment">            properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class="line"><span class="comment">            objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,</span></span><br><span class="line"><span class="comment">            environments?,databaseIdProvider?,mappers?</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入 properties 文件, 此后就可以在当前文件中使用 $&#123;key&#125; 的方式访问 value --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        typeAliases(这是一个复数标签): 设置类型别名</span></span><br><span class="line"><span class="comment">                 在 MyBatis 的范围中, 就可以使用别名表示一个具体的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           typeAlias: 为某个具体的类型设置一个别名</span></span><br><span class="line"><span class="comment">           属性:</span></span><br><span class="line"><span class="comment">                type: 设置需要起别名的类型</span></span><br><span class="line"><span class="comment">                alias: 设置某个类型的别名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.thr.mybatis.pojo.User&quot; alias=&quot;abc&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--若不设置 alias, 其默认别名为类名 User, 且不区分大小写 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.thr.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过包来设置类型别名, 指定包下所有的类型将全部拥有默认的别名, 即类名且不区分大小写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.thr.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>映射文件里头修改，测试结果无误</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672505696179.png" alt="图4.3.1"></p></li></ul><h4 id="4-4-mappers-标签"><a href="#4-4-mappers-标签" class="headerlink" title="4.4 mappers 标签"></a>4.4 mappers 标签</h4><ul><li><p><strong>在 resources 下创建多级目录</strong>&#x3D;&#x3D;(注意使用 &#x2F; 分割，而不是 . 分割)&#x3D;&#x3D;</p><blockquote><p>因为 resources 下只能建目录不能建包</p></blockquote><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672506221981.png" alt="图4.4.1"></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672506279689.png" alt="图4.4.2"></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672507201101.png" alt="图4.4.3"></p></li><li><p><strong>在核心配置文件中引入映射文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            以包的方式来引入映射文件, 但是必须满足两个条件:</span></span><br><span class="line"><span class="comment">                1. mapper接口 和 映射文件 所在的包必须一致</span></span><br><span class="line"><span class="comment">                2. mapper接口的名字 和 映射文件的名字 必须一致</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.thr.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注： <strong>改之后报错需要重构一下！！</strong></p><p>(如果报错Invalid bound statement的去右边maven打开clean一下)</p></blockquote></li><li><p>编译后可以在 target 目录下的 <strong>classes(主程序编译之后的类)</strong> 目录下看到<strong>它们实际上被加载到了同一个目录下</strong></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672506979687.png" alt="图4.4.4"></p></li></ul><h3 id="5-配置核心配置文件和映射文件模板"><a href="#5-配置核心配置文件和映射文件模板" class="headerlink" title="5. 配置核心配置文件和映射文件模板"></a>5. 配置核心配置文件和映射文件模板</h3><h4 id="5-1-配置模板"><a href="#5-1-配置模板" class="headerlink" title="5.1 配置模板"></a>5.1 配置模板</h4><p>（1）<strong>核心配置文件的模板</strong></p><ul><li><p>在 settings 里头配置</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672507887309.png" alt="图5.1.1"></p></li><li><p>之后右键就可以看到了</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672507932353.png" alt="图5.1.2"></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672507969288.png" alt="图5.1.3"></p></li></ul><p>（2）<strong>映射文件的模板</strong></p><ul><li><p>同理</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672508246355.png" alt="图5.1.4"></p></li></ul><h4 id="5-2-使用模板"><a href="#5-2-使用模板" class="headerlink" title="5.2 使用模板"></a>5.2 使用模板</h4><p>（1）创建新 Module</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672509931041.png" alt="图5.2.1"></p><p>（2）把原来的依赖和一些配置文件复制粘贴过来</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672510172270.png" alt="图5.2.1"></p><p>（3）搭建 MyBatis 框架</p><ul><li>利用前面创建的<strong>模板新建核心配置文件</strong></li><li>创建 <strong>mapper 接口</strong></li><li>创建 <strong>映射文件</strong>，在 namespace 里头写上接口的全类名</li></ul><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672510553461.png" alt="图5.2.2"></p><ul><li><p>创建<strong>主体类</strong> User (从之前那个工程里头复制过来即可)</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672510746378.png" alt="图5.2.3"></p></li><li><p><strong>将核心配置文件中别名和映射文件的全类名补充上</strong></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672557681099.png" alt="图5.2.4"></p></li></ul><h3 id="6-MyBatis-获取参数值的两种方式"><a href="#6-MyBatis-获取参数值的两种方式" class="headerlink" title="6. MyBatis 获取参数值的两种方式"></a>6. MyBatis 获取参数值的两种方式</h3><blockquote><p>MyBatis 获取参数值的两种方式：**${} 和 #{}**</p><p><strong>${} 的本质就是字符串拼接，#{} 的本质就是占位符赋值</strong>(后者比较常用，因为其可以自动添加单引号，还可以避免 sql 注入)</p><p><strong>${}</strong> 使用字符串拼接的方式拼接 sql，<strong>若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</strong></p><p><strong>#{}</strong> 使用占位符赋值的方式拼接 sql，此时为字符串类型或日期类型的字段进行赋值时，<strong>可以自动添加单引号</strong></p></blockquote><h4 id="6-1-单个字面量类型的参数"><a href="#6-1-单个字面量类型的参数" class="headerlink" title="6.1 单个字面量类型的参数"></a>6.1 单个字面量类型的参数</h4><blockquote><p>若mapper接口中的方法参数为单个的字面量类型</p><p>此时可以使用 <code>$&#123;&#125;</code> 和 <code>#&#123;&#125;</code> 以任意的名称获取参数的值，注意 <code>$&#123;&#125;</code> 需要<strong>手动加单引号</strong> </p></blockquote><ul><li><p>在 mapper 接口里<strong>编写方法</strong>(根据用户名查询用户信息)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 单个字面量类型的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 User 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><blockquote><p>注：  </p><p>此处 #{} 的 {} 里写啥都没关系，只是最好见名知意</p><p>而此处若用 ${} 需在外头加单引号！！</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User getUserByUsername(String username); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select * from t_user where username = #&#123;username&#125; --&gt;</span></span><br><span class="line">    select * from t_user where username = &#x27;$&#123;username&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>表名爆红的解决方案</strong>：(好像没啥用，后面又改回来了，莫名其妙就好了)</p><p>File-&gt;Settings-&gt;Languages&amp;Frameworks-&gt;SQL Dialects-&gt;Global SQL Dialect设为None</p></blockquote><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672556310152.png" alt="图6.1.1"></p><ul><li><p><strong>编写测试类</strong>（#{} 被当作占位符来解析）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParameterTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 sqlSession 对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 UserMapper 的代理实现类对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 mapper 里头的方法</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserByUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-2-多个字面量类型的参数"><a href="#6-2-多个字面量类型的参数" class="headerlink" title="6.2 多个字面量类型的参数"></a>6.2 多个字面量类型的参数</h4><blockquote><p>若 mapper 接口中的<strong>方法参数为多个</strong>时，此时MyBatis<strong>会自动将这些参数放在一个 map集合 中</strong>，因此只需要通过<code>$&#123;&#125;</code>和<code>#&#123;&#125;</code><strong>访问map集合的键</strong>就可以<strong>获取相对应的值</strong>，注意<code>$&#123;&#125;</code>需要手动加单引号</p></blockquote><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证登录(多个字面量类型的参数)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 User 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">checkLogin</span><span class="params">(String username, String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User checkLogin(String username, String password); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处可用 #&#123;arg0&#125; #&#123;arg1&#125; 或者 #&#123;param1&#125; #&#123;param2&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125; --&gt;</span></span><br><span class="line">    select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若写成 #{username} 和 #{password} 则会报错！！</p><p>报错提示：<strong>Available parameters are [arg1, arg0, param1, param2]</strong></p></blockquote></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLogin</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLogin(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-3-map-集合类型的参数"><a href="#6-3-map-集合类型的参数" class="headerlink" title="6.3 map 集合类型的参数"></a>6.3 map 集合类型的参数</h4><blockquote><p>若 mapper 接口中的方法需要的参数为多个时，此时可以<strong>手动创建 map 集合</strong>，将这些数据放在map中只需要通过 <code>$&#123;&#125;</code> 和 <code>#&#123;&#125;</code> <strong>访问map集合的键就可以获取相对应的值</strong>，注意 <code>$&#123;&#125;</code> 需要手动加单引号 </p></blockquote><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    User <span class="title function_">checkLogin</span><span class="params">(String username, String password)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证登录(map 集合类型的参数)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 集合里头存储用户名和密码, 用户名的键为 username, 密码的键为 password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 User 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">checkLoginByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User checkLoginByMap(Map&lt;String, Object&gt; map); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLoginByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-4-实体类类型的参数"><a href="#6-4-实体类类型的参数" class="headerlink" title="6.4 实体类类型的参数"></a>6.4 实体类类型的参数</h4><blockquote><p>若 mapper 接口中的方法<strong>参数为实体类对象</strong>时此时可以使用 <code>$&#123;&#125;</code> 和 <code>#&#123;&#125;</code>，通过<strong>访问实体类对象中的属性名获取属性值</strong>，注意 <code>$&#123;&#125;</code> 需要手动加单引号 </p></blockquote><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    User <span class="title function_">checkLogin</span><span class="params">(String username, String password)</span>;</span><br><span class="line">    User <span class="title function_">checkLoginByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户信息(实体类类型的参数)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 参数是 user 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><blockquote><p><strong>属性和成员变量</strong>？</p><p>属性对应数据库对象的属性，成员变量是程序的变量。</p><p>到 springboot 的时候还要写代码把属性和成员变量对应起来</p><p>意思是：如果你的 <strong>getId 方法</strong>，return 的是你 name 的值，那我不管，我就认为你的这个 name 叫 <strong>id 属性</strong></p><p>不要将成员变量和方法搞混，我新建一个类，没有成员变量只有方法有没有问题？我将这个方法命名为get方法有没有问题？肯定都没问题呀</p><p>如果是个实体类，一般都是成员变量和getset方法一一对应的，但是总会出现一些非一般的情况。老师是给大家提个醒，别到时候一脸懵逼，哈哈哈</p><p>没有成员变量不影响你写一个getter&#x2F;setter方法</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void insertUser(User user); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null, #&#123;username&#125;, #&#123;password&#125;, #&#123;age&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">33</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">    mapper.insertUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-5-使用-Param-标识参数"><a href="#6-5-使用-Param-标识参数" class="headerlink" title="6.5 使用 @Param 标识参数"></a>6.5 使用 @Param 标识参数</h4><blockquote><p>该方法较为常用，可以通过 <strong>@Param 注解</strong> 标识 mapper 接口中的方法参数，此时，会将这些<strong>参数放在map集合中</strong>（以 <strong>@Param 中的值为键，参数为值 或 以param1，param2，… 为键，参数为值</strong>），只需要通过<code>$&#123;&#125;</code>和<code>#&#123;&#125;</code><strong>访问map集合的键</strong>就可以获取相对应的值，注意<code>$&#123;&#125;</code>需要手动加单引号</p></blockquote><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    User <span class="title function_">checkLogin</span><span class="params">(String username, String password)</span>;</span><br><span class="line">    User <span class="title function_">checkLoginByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证登录(使用 <span class="doctag">@Param</span> 标识参数), 该方法比较常用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 User 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">checkLoginByParam</span><span class="params">(<span class="meta">@Param(value = &quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User checkLoginByParam(@Param(value = &quot;username&quot;) String username, @Param(&quot;password&quot;) String password); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里不仅可以用 @Param 的 value 属性值为键, 也可以用 param1, param2 为键(即 #&#123;param1&#125;) --&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLoginByParam</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByParam(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-6-总结"><a href="#6-6-总结" class="headerlink" title="6.6 总结"></a>6.6 总结</h4><ul><li>在使用过程中最好使用 <strong>实体类型的参数</strong> 和 <strong>@Param注解</strong> 来获取参数值(实际只要记住最后两种方法即可)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis 获取参数值的两种方式: #&#123;&#125; 和 $&#123;&#125;</span></span><br><span class="line"><span class="comment"> *  #&#123;&#125; 的本质是占位符赋值, $&#123;&#125; 的本质是字符串拼接</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 若 mapper 接口方法的参数为单个的字面量类型</span></span><br><span class="line"><span class="comment"> *    此时可以通过 #&#123;&#125; 和 $&#123;&#125; 以任意的内容获取参数值, 一定要注意 $&#123;&#125; 的单引号问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. 若 mapper 接口方法的参数为多个的字面量类型</span></span><br><span class="line"><span class="comment"> *    此时 MyBatis 会将参数放在 map 集合中, 以两种方式存储数据</span></span><br><span class="line"><span class="comment"> *    a&gt; 以 arg0,arg1... 为键, 以参数为值</span></span><br><span class="line"><span class="comment"> *    b&gt; 以 param1,param2... 为键, 以参数为值</span></span><br><span class="line"><span class="comment"> *    因此, 只需要通过 #&#123;&#125; 和 $&#123;&#125; 访问 map 集合的键, 就可以获取相对应的值, 一定要注意 $&#123;&#125; 的单引号问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. 若 mapper 接口方法的参数为 map 集合类型的参数</span></span><br><span class="line"><span class="comment"> *    只需要通过 #&#123;&#125; 和 $&#123;&#125; 访问 map 集合的键, 就可以获取相对应的值, 一定要注意 $&#123;&#125; 的单引号问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4. 若 mapper 接口方法的参数为实体类类型的参数</span></span><br><span class="line"><span class="comment"> *    只需要通过 #&#123;&#125; 和 $&#123;&#125; 访问实体类的属性名, 就可以获取相对应的属性值, 一定要注意 $&#123;&#125; 的单引号问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 5. 可以在 mapper 接口方法的参数上设置 <span class="doctag">@Param</span> 注解</span></span><br><span class="line"><span class="comment"> *    此时 MyBatis 会将这些参数放在 map 中, 以两种方式进行存储</span></span><br><span class="line"><span class="comment"> *    a&gt; 以 <span class="doctag">@Param</span> 注解的 value 属性值为键, 以参数为值</span></span><br><span class="line"><span class="comment"> *    b&gt; 以 param1, param2... 为键, 以参数为值</span></span><br><span class="line"><span class="comment"> *    只需要通过 #&#123;&#125; 和 $&#123;&#125; 访问 map 集合的键, 就可以获取相对应的值, 一定要注意 $&#123;&#125; 的单引号问题</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="7-MyBatis-的各种查询功能"><a href="#7-MyBatis-的各种查询功能" class="headerlink" title="7. MyBatis 的各种查询功能"></a>7. MyBatis 的各种查询功能</h3><h4 id="7-1-查询一个实体类对象"><a href="#7-1-查询一个实体类对象" class="headerlink" title="7.1 查询一个实体类对象"></a>7.1 查询一个实体类对象</h4><blockquote><p>若 sql 语句<strong>查询的结果为多条</strong>时，一定<strong>不能以实体类类型作为方法的返回值</strong>，否则会抛出异常 TooManyResultsException</p><p>若 sql 语句<strong>查询的结果为1条</strong>时，此时<strong>可以使用实体类类型或 list 集合类型</strong>作为方法的返回值</p></blockquote><ul><li><p>创建 mapper 接口、映射文件以及测试类</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672652728402.png" alt="图7.1.1"></p></li><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SelectMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 id 查询用户信息(查询一个实体类对象)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个实体类对象(此处是User 类的对象)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User getUserById(@Param(&quot;id&quot;) Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-2-查询一个-list-集合"><a href="#7-2-查询一个-list-集合" class="headerlink" title="7.2 查询一个 list 集合"></a>7.2 查询一个 list 集合</h4><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SelectMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个 list 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;User&gt; getAllUser(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAllUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    List&lt;User&gt; list = mapper.getAllUser();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-3-查询单个数据"><a href="#7-3-查询单个数据" class="headerlink" title="7.3 查询单个数据"></a>7.3 查询单个数据</h4><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SelectMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户的总数量(查询单个数据)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回用户数量(int 类型)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">getCount</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Integer getCount(); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        此处的 resultType 写 int/Integer 也行(不区分大小写)</span></span><br><span class="line"><span class="comment">        因为 MyBatis 中为 Java 中常用的类型设置了类型别名</span></span><br><span class="line"><span class="comment">        Integer: Integer, int</span></span><br><span class="line"><span class="comment">        int: _int, _integer</span></span><br><span class="line"><span class="comment">        String: string</span></span><br><span class="line"><span class="comment">        Map: map</span></span><br><span class="line"><span class="comment">        HashMap: hashmap   </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">    select count(*) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> mapper.getCount();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-4-查询一条数据为-map-集合"><a href="#7-4-查询一条数据为-map-集合" class="headerlink" title="7.4 查询一条数据为 map 集合"></a>7.4 查询一条数据为 map 集合</h4><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SelectMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line">    Integer <span class="title function_">getCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 id 查询用户信息, 以 map 集合来获取(查询一条数据为 map 集合)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个 map 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String, Object&gt; <span class="title function_">getUserByIdToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map&lt;String, Object&gt; getUserByIdToMap(@Param(&quot;id&quot;) Integer id); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByIdToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByIdToMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出是以 字段名为键, 以 字段的值为值的 map(若某个字段的值为 null, 则不会被放在 map 里)</span></span><br><span class="line">    <span class="comment">// (map 集合中的 key 是无序的不可重复的, 其排序是按照 key 所在类重写的equals()和hashcode()来进行的)</span></span><br><span class="line">    <span class="comment">// &#123;password=123456, gender=男, id=1, age=23, email=12345@qq.com, username=admin&#125;</span></span><br><span class="line">    Map&lt;String, Object&gt; map = mapper.getUserByIdToMap(<span class="number">1</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-5-查询多条数据为-map-集合"><a href="#7-5-查询多条数据为-map-集合" class="headerlink" title="7.5 查询多条数据为 map 集合"></a>7.5 查询多条数据为 map 集合</h4><blockquote><p>若查询的数据有多条时，并且要将每条数据转换为 map 集合</p><p>此时有两种解决方案：（法一用的较多）</p><p>a&gt; 如果不确定返回几条结果，建议将 mapper 接口方法的<strong>返回值设置为泛型是 map 的 list</strong> 集合(即 List&lt;Map&lt;String, Object&gt;&gt; getAllUserToMap();)</p><p>b&gt; 可以将<strong>每条数据转换的 map 集合放在一个大的 map 中</strong>，但是必须要<strong>通过 @MapKey 注解将查询的某个字段的字作为大的 map 的键</strong>(json 格式？)</p><p>小技巧：</p><p>查询的结果有实体类，用实体类对象接收</p><p>查询的结果无实体类，用map集合方式接收</p></blockquote><p>（1）&#x3D;&#x3D;方法一：List&lt;Map&lt;&gt;&gt;&#x3D;&#x3D;</p><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有的用户信息为 map 集合(查询多条数据为 map 集合)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个存放着 每一条数据转换成的 map 集合 的 list 集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><blockquote><p>注意此处的 resultType&#x3D;”map” ？？</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Map&lt;String, Object&gt;&gt; getAllUserToMap(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAllUserToMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = mapper.getAllUserToMap();</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    <span class="comment">/*  运行结果:</span></span><br><span class="line"><span class="comment">            [&#123;password=123456, gender=男, id=1, age=23, email=12345@qq.com, username=admin&#125;,</span></span><br><span class="line"><span class="comment">            &#123;password=123456, gender=女, id=4, age=33, email=123@qq.com, username=root&#125;]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）&#x3D;&#x3D;方法二：@MapKey&#x3D;&#x3D;</p><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 采用注解方式</span></span><br><span class="line"><span class="comment">  * 查询所有的用户信息为 map 集合(查询多条数据为 map 集合)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 返回一个装着 map 的 map 集合</span></span><br><span class="line"><span class="comment">  * (这里用查询出来的 id 为外层 map 的键, 值就是当前的每一条数据所转换为的 map 集合)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMapByMapKey</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map&lt;String, Object&gt; getAllUserToMapByMapKey(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMapByMapKey&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAllUserToMapByMapKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = mapper.getAllUserToMapByMapKey();</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="comment">/*  运行结果:</span></span><br><span class="line"><span class="comment">            &#123;1=&#123;password=123456, gender=男, id=1, age=23, email=12345@qq.com, username=admin&#125;,</span></span><br><span class="line"><span class="comment">            4=&#123;password=123456, gender=女, id=4, age=33, email=123@qq.com, username=root&#125;&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-特殊-SQL-的执行"><a href="#8-特殊-SQL-的执行" class="headerlink" title="8. 特殊 SQL 的执行"></a>8. 特殊 SQL 的执行</h3><h4 id="8-1-模糊查询"><a href="#8-1-模糊查询" class="headerlink" title="8.1 模糊查询"></a>8.1 模糊查询</h4><blockquote><p>直接用 <code>#&#123;&#125;</code> 会报错(因为 ? 在引号里头, 不会被当成占位符解析, 而是被当成了字符串)，因此采用如下三种方法：</p><p>a&gt; <strong>${}</strong> (慎用, 会有 sql 注入的风险)</p><p>b&gt; <strong>concat 字符串拼接函数 和 #{}</strong></p><p>c&gt; <strong>双引号 和 #{}</strong> (该方式比较<strong>常用</strong>)</p></blockquote><p>（1）&#x3D;&#x3D;直接用 ${}&#x3D;&#x3D;</p><ul><li><p>创建 mapper 接口和 映射文件</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672677489247.png" alt="图8.1.1"></p></li><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SpecialSQLMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不确定查询出来的结果有几条, 建议使用 list 集合来获取(即用 list 作为返回值)</span></span><br><span class="line">    <span class="comment">// 因为如果用实体类对象来接收的话, 会报错(TooManyResultException)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户名模糊查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blur 模糊查询的限定条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回存放 User 对象的 list 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;blur&quot;)</span> String blur)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;User&gt; getUserByLike(@Param(&quot;blur&quot;) String blur); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username like &#x27;%$&#123;blur&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByLike</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SpecialSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; list = mapper.getUserByLike(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    <span class="comment">// 结果: User&#123;id=1, username=&#x27;admin&#x27;, password=&#x27;123456&#x27;, age=23, gender=&#x27;男&#x27;, email=&#x27;12345@qq.com&#x27;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）&#x3D;&#x3D;使用 mysql 中的 concat 字符串拼接函数 和 #{}&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;User&gt; getUserByLike(@Param(&quot;blur&quot;) String blur); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username like concat(&#x27;%&#x27;, #&#123;blur&#125;, &#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）&#x3D;&#x3D;使用 双引号 和 #{}&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;User&gt; getUserByLike(@Param(&quot;blur&quot;) String blur); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username like &quot;%&quot;#&#123;blur&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-2-批量删除"><a href="#8-2-批量删除" class="headerlink" title="8.2 批量删除"></a>8.2 批量删除</h4><blockquote><p>mysql 中写的 sql 语句：</p><p>DELETE FROM t_user WHERE id &#x3D; 5 OR id &#x3D; 6;<br>DELETE FROM t_user WHERE id IN(7,8);</p><p>由于 #{} 会在参数两边自动拼接单引号，会导致出错，但不会报错，只是更新的数据为0条，例如：如果使用#{}，则解析后的sql语句为 delete from t_user where id in (‘1,2,3’)，这样是将1,2,3看做是一个整体，只有id为 1,2,3 的数据会被删除。正确的语句应该是delete from t_user where id in (1,2,3)，或者delete from t_user where id in (‘1’,’2’,’3’) 。所以<strong>只能使用 ${}</strong></p></blockquote><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除的功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids 用户 id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteMoreUser</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void deleteMoreUser(@Param(&quot;ids&quot;) String ids);  // eg. ids: 9, 10--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreUser&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处不能直接用 in(#&#123;ids&#125;), 因为其本质是占位符赋值,</span></span><br><span class="line"><span class="comment">             所以其会为我们所赋的值自动加上单引号, 解析后变成 in(&#x27;9,10&#x27;), 故报错</span></span><br><span class="line"><span class="comment">             该处用 in() 进行批量删除时只能采用 $&#123;&#125; </span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    delete from t_user where id in($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteMoreUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SpecialSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);</span><br><span class="line"></span><br><span class="line">    mapper.deleteMoreUser(<span class="string">&quot;9, 10&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-3-动态设置表名"><a href="#8-3-动态设置表名" class="headerlink" title="8.3 动态设置表名"></a>8.3 动态设置表名</h4><blockquote><p>**只能使用 ${}**，因为表名不能加单引号 </p></blockquote><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态设置表名, 查询对应表当前所有用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回存放 当前表每条信息转换成的 User对象 的 list 集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;User&gt; getUserList(@Param(&quot;tableName&quot;) String tableName); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意！表名是不能加单引号的, 所以直接用 #&#123;&#125; 会报错！</span></span><br><span class="line"><span class="comment">             所有该处动态设置表名时只能使用 $&#123;&#125;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SpecialSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; list = mapper.getUserList(<span class="string">&quot;t_user&quot;</span>);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-4-添加功能获取自增的主键-常用！难理解"><a href="#8-4-添加功能获取自增的主键-常用！难理解" class="headerlink" title="8.4 添加功能获取自增的主键(常用！难理解)"></a>8.4 添加功能获取自增的主键(常用！难理解)</h4><blockquote><p>也就是说，这个insertUser方法的目的是为了实现添加一个数据，并且获取他的自增列然后把jdbc自增列的值赋给我们实体类对应的属性</p><p><strong>注意看，最后的user不是查出来的，是传进数据库操作的对象，user的id值在进行xml操作时，被赋了值</strong></p><p>其实就一个功能 你没设置前在控制台看不到 id 多少 但是数据库已经自动设置好了，设置后能在控制台看到</p><p><strong>实际上就是添加了一个数据并在 id 上回显添加成功的这次 id</strong></p><p><strong>场景模拟</strong>：假设现在有两张表：</p><p>t_clazz(clazz_id,clazz_name)   <strong>学生表</strong></p><p>t_student(student_id,student_name,clazz_id)   <strong>班级表</strong></p><p>需求：<strong>在添加班级信息的同时为班级分配学生</strong>(需要在多的一方设置主键，即在学生里面设置班级的 id)</p><p>1、添加班级信息  </p><p>2、获取新添加的班级的 id  </p><p>3、为班级分配学生，即将某学生的班级 id 修改为新添加的班级的 id</p></blockquote><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息并获取自增的主键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user User 对象</span></span><br><span class="line"><span class="comment"> * useGeneratedKeys: 设置使用自增的主键</span></span><br><span class="line"><span class="comment"> * keyProperty: 因为增删改有统一的返回值(是受影响的行数),</span></span><br><span class="line"><span class="comment"> *             因此只能将获取的自增的主键放在传输的参数 user 对象的某个属性中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void insertUser(User user); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            useGeneratedKeys: 表示当前的添加功能使用了自增的主键</span></span><br><span class="line"><span class="comment">            keyProperty: 将添加的数据的自增主键为实体类类型的参数的属性赋值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    insert into t_user values(null, #&#123;username&#125;, #&#123;password&#125;, #&#123;age&#125;, #&#123;gender&#125;, #&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">SpecialSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SpecialSQLMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;xiaoming&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">    mapper.insertUser(user);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-自定义映射-resultMap"><a href="#9-自定义映射-resultMap" class="headerlink" title="9. 自定义映射 resultMap"></a>9. 自定义映射 resultMap</h3><h4 id="9-0-准备工作"><a href="#9-0-准备工作" class="headerlink" title="9.0 准备工作"></a>9.0 准备工作</h4><ul><li><p>创建一个新模块</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672763714001.png" alt="图9.0.1"></p></li><li><p>将原先的 jdbc 配置文件、log4j 文件和 util 类复制过来，再创建包、核心配置文件等(搭建 MyBatis 框架)</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672764073181.png" alt="图9.0.2"></p></li><li><p><strong>创建员工表和部门表</strong></p><blockquote><p>员工 和 部门 是 多对一 的关系 </p><p>在多的一方，即员工表中添上部门的 id 这一字段</p></blockquote><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672764522519.png" alt="图9.0.3"></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672764341273.png" alt="图9.0.4"></p></li><li><p>添加一些测试数据</p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672764721770.png" alt="图9.0.5"></p><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672764736186.png" alt="图9.0.6"></p></li><li><p><strong>创建 主体类</strong>(包含有参无参构造、getter和setter、toString方法) <strong>和 mapper 接口</strong></p><blockquote><p>此处的 Emp 中 缺少 dept_id 字段对应的属性</p><p>并且注意此处 Emp 类中与 <strong>emp_id</strong> 和 emp_name 字段名对应的属性名是 <strong>empId</strong> 和 empName（一个是下划线，一个是驼峰式命名，导致<strong>字段和属性名不一致</strong>）</p></blockquote><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672765149801.png" alt="图9.0.7"></p></li></ul><h4 id="9-1-resultMap-处理字段和属性的映射关系-字段和属性名不一致"><a href="#9-1-resultMap-处理字段和属性的映射关系-字段和属性名不一致" class="headerlink" title="9.1 resultMap 处理字段和属性的映射关系(字段和属性名不一致)"></a>9.1 resultMap 处理字段和属性的映射关系(字段和属性名不一致)</h4><blockquote><p> 若<strong>字段名和属性名不一致</strong>，则<strong>查询的结果</strong>中，属性名和字段名<strong>不一致的属性值为 null</strong> </p></blockquote><p>（1）解决方法一：&#x3D;&#x3D;在 SQL 语句中起别名&#x3D;&#x3D;</p><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 id 查询员工信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> empId 员工 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个 Emp 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Emp <span class="title function_">getEmpByEmpId</span><span class="params">(<span class="meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Emp getEmpByEmpId(@Param(&quot;empId&quot;) Integer empId); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEmpId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1. 在 SQL 语句中起别名(不用 select * , 而是用 select 具体的字段) --&gt;</span></span><br><span class="line">        select emp_id empId, emp_name empName, age, gender from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpByEmpId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpByEmpId(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）解决方法二：&#x3D;&#x3D;在核心配置文件的 settings 标签设置全局配置&#x3D;&#x3D;</p><ul><li><p>在 官方文档里头找到并<strong>复制到核心配置文件</strong>中</p><blockquote><p>注意核心配置文件里的<strong>标签顺序</strong>：properties?,settings?,typeAliases?….</p><p>可以把这块代码直接放在 模板文件 里头</p></blockquote><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672766963965.png" alt="图9.1.1"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动将下划线映射为驼峰 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Emp getEmpByEmpId(@Param(&quot;empId&quot;) Integer empId); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEmpId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2. 在核心配置文件的 settings 标签设置全局配置 --&gt;</span></span><br><span class="line">        select * from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>（3）解决方法三：&#x3D;&#x3D;使用 resultMap 自定义映射处理&#x3D;&#x3D;</p><ul><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3. 使用 resultMap 自定义映射处理(编写自定义映射)</span></span><br><span class="line"><span class="comment">            id: 唯一标识</span></span><br><span class="line"><span class="comment">            type: 处理映射关系的实体类类型</span></span><br><span class="line"><span class="comment">            常用的标签:</span></span><br><span class="line"><span class="comment">                id: 处理主键和实体类中属性的映射关系</span></span><br><span class="line"><span class="comment">                result: 处理普通字段和实体类中属性的映射</span></span><br><span class="line"><span class="comment">            标签里头的属性:</span></span><br><span class="line"><span class="comment">                column: 设置映射关系中的字段名, 必须是 sql 查询出的某个字段</span></span><br><span class="line"><span class="comment">                property: 设置映射关系中的属性的属性名, 必须是实体类类型中的属性名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Emp getEmpByEmpId(@Param(&quot;empId&quot;) Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEmpId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="9-2-多对一映射处理"><a href="#9-2-多对一映射处理" class="headerlink" title="9.2 多对一映射处理"></a>9.2 多对一映射处理</h4><blockquote><p>场景模拟：查询员工信息以及员工所对应的部门信息</p><p>首先在 Emp 类添加 private Dept dept; 属性 </p><p>在 <strong>员工Emp类 中设置 部门Dept类型 的属性</strong>，表示当前所对应的员工的部门(<strong>一是对象，多是集合，多对一则在”多“的类中创建”一“的类型的属性</strong>)，同时添加 getter and setter 并重写 toString 方法 </p><p>就是<strong>通过一个sql查询emp，要把里面的dept属性赋值的问题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2. 处理多对一的映射关系(就是通过一个sql查询emp，要把里面的dept属性赋值的问题)</span><br><span class="line">   下面的方法都用的是 resultMap !!</span><br><span class="line">   2.1 级联方式处理</span><br><span class="line">   2.2 association 标签(javaType: 设置要处理的属性的类型)</span><br><span class="line">   处理多对一(或一对一)的映射关系(实际是处理实体类类型的属性)</span><br><span class="line">   2.3 分步查询(先查员工, 查完员工后知道员工所对应的部门 id,</span><br><span class="line">   再把部门 id 作为条件去部门表里查部门信息, 查询的结果再赋值给 emp类 里头的 dept对象)</span><br><span class="line">   (相当于用第一步结果中的 dept_id 这个结果作为第二部查询的条件)</span><br></pre></td></tr></table></figure></blockquote><p>（1）&#x3D;&#x3D;级联方式处理映射关系&#x3D;&#x3D;</p><ul><li><p>在 mapper 接口里<strong>编写方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取员工以及所对应的部门信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> empId 员工 id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个 Emp 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByEmpId</span><span class="params">(<span class="meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.1 级联(将 emp类 中的属性(对象类型的属性)的属性映射到字段)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Emp getEmpAndDeptByEmpId(@Param(&quot;empId&quot;) Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEmpId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多表查询(该处采用左外连接, 查询所有员工及其部门, 如部门为空, 显示 null) --&gt;</span></span><br><span class="line">    select t_emp.*, t_dept.*</span><br><span class="line">    from t_emp left join t_dept</span><br><span class="line">    on t_emp.dept_id = t_dept.dept_id</span><br><span class="line">    where t_emp.emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpAndDeptByEmpId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByEmpId(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）&#x3D;&#x3D;使用 association 处理映射关系&#x3D;&#x3D;</p><ul><li><p>在映射文件里<strong>写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.2 association 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            association 标签: 处理多对一(或一对一)的映射关系(实际是处理实体类类型的属性)</span></span><br><span class="line"><span class="comment">            该标签里头的属性:</span></span><br><span class="line"><span class="comment">                property: 设置需要处理映射关系的属性的属性名</span></span><br><span class="line"><span class="comment">                javaType: 设置要处理的属性的类型</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>（3）&#x3D;&#x3D;分步查询&#x3D;&#x3D;</p><ul><li><p> 在 <strong>EmpMapper</strong> 接口<strong>添加分步查询的第一步</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询获取员工以及所对应的部门信息的第一步</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> empId 员工 id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个 Emp 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;</span><br></pre></td></tr></table></figure></li><li><p>再创建一个 <strong>DeptMapper</strong> 接口<strong>添加分步查询的第二步</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.thr.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查哪张表就写在其对应的接口中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DeptMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过分步查询获取员工以及所对应的部门信息的第二步</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deptId 在第一步查询到的员工信息里的部门 id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个 部门Dept类 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 映射文件中<strong>添加 SQL 语句及 resultMap</strong> </p><blockquote><p>获取方法的唯一标识：</p></blockquote><p><img src="/../img/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88.assets/1672831119262.png" alt="图9.2.1"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2.3 分步查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            property: 设置需要处理映射关系的属性的属性名</span></span><br><span class="line"><span class="comment">            select: 设置分步查询的 sql 的唯一标识(mapper 接口的全类名 + 查询语句的 id)</span></span><br><span class="line"><span class="comment">            column: 将查询出的某个字段作为分步查询的 sql 的条件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com.thr.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Emp getEmpAndDeptByStepOne(@Param(&quot;empId&quot;) Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.thr.mybatis.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Dept getEmpAndDeptByStepTwo(@Param(&quot;deptId&quot;) Integer deptId); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dept where dept_id = #&#123;deptId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpAndDeptByStep</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">2</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（4）<strong>分步查询的优点：延迟加载(懒加载)</strong></p><blockquote><p>分步查询的优点：可以实现延迟加载</p><p>但是必须在核心配置文件中<strong>设置全局配置信息</strong>(在 settings 标签中进行设置)：</p><p><strong>lazyLoadingEnabled</strong>：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。这里需要<strong>设置为 true</strong></p><p><strong>aggressiveLazyLoading</strong>：当开启时，<strong>任何方法的调用都会加载该对象的所有属性</strong>。 否则，每个属性会按需加载。这里需要<strong>设置为 false</strong>(mybatis 版本小于等于3.4.1时，默认为 true，其他版本默认为 false，所以高版本可以不用设置)</p><p>此时就可以实现按需加载，<strong>获取的数据是什么，就只会执行相应的sql</strong>。此时可通过 association 和 collection 中的<strong>fetchType 属性设置当前的分步查询是否使用延迟加载</strong>，<strong>fetchType&#x3D;”lazy(延迟加载)|eager(立即加载)”</strong></p><p>延迟加载就是我需要分步加载中的哪一步就只执行哪一步</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动将下划线映射为驼峰 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启延迟加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按需加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-3-一对多映射处理"><a href="#9-3-一对多映射处理" class="headerlink" title="9.3 一对多映射处理"></a>9.3 一对多映射处理</h4><blockquote><p>一个部门里有多个员工（对多对应集合）</p><p>需求：查询部门信息并把当前部门中的所有员工也查出来</p><p><strong>在 Dept 类中添加属性 private List&lt;Emp&gt; emps;</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3. 处理一对多的映射关系</span><br><span class="line">3.1 collection -&gt; 处理一对多或者多对多的映射关系(处理集合类型的属性)</span><br><span class="line">ofType: 设置当前集合中的属性</span><br><span class="line">3.2 分步查询</span><br></pre></td></tr></table></figure></blockquote><p>（1）&#x3D;&#x3D;collection&#x3D;&#x3D;</p><ul><li><p>在 <strong>DeptMapper 接口中添加方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询部门以及部门中的员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptId 部门 id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个部门对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByDeptId</span><span class="params">(<span class="meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 DeptMapper <strong>映射文件中写 sql 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.1 collection 标签(处理一对多或者多对多的映射关系(处理集合类型的属性)) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            ofType: 设置集合类型的属性中存储的数据的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Dept getDeptAndEmpByDeptId(@Param(&quot;deptId&quot;) Integer deptId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByDeptId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;DeptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from t_dept left join t_emp</span><br><span class="line">    on t_dept.dept_id = t_emp.dept_id</span><br><span class="line">    where t_dept.dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDeptAndAEmpByDeptId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">DeptMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DeptMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> mapper.getDeptAndEmpByDeptId(<span class="number">1</span>);</span><br><span class="line">    System.out.println(dept);</span><br><span class="line">    <span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">        Dept&#123;deptId=1, deptName=&#x27;A&#x27;, emps=[</span></span><br><span class="line"><span class="comment">                Emp&#123;empId=1, empName=&#x27;张三&#x27;, age=20, gender=&#x27;男&#x27;, dept=null&#125;,</span></span><br><span class="line"><span class="comment">                Emp&#123;empId=4, empName=&#x27;赵六&#x27;, age=24, gender=&#x27;男&#x27;, dept=null&#125;</span></span><br><span class="line"><span class="comment">                ]</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）&#x3D;&#x3D;分步查询&#x3D;&#x3D;</p><ul><li><p>在 <strong>DeptMapper 接口中添加方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询查询部门以及部门中的员工信息第一步(一对多)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptId 部门 id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个部门对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 <strong>EmpMapper 接口中添加方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询查询部门以及部门中的员工信息第二步(一对多)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptId 部门 id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个包含 Emp 对象的 List 集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;deptId&quot;)</span> Integer deptId)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 映射文件中<strong>添加 SQL 语句及 resultMap</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.2 分步查询第一步 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptAndEmpResultMapByStep&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.thr.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;dept_id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Dept getDeptAndEmpByStepOne(@Param(&quot;deptId&quot;) Integer deptId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptAndEmpResultMapByStep&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.2 分步查询第二步 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;deptId&quot;) Integer deptId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDeptAndAEmpByStep</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">DeptMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DeptMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Dept</span> <span class="variable">dept</span> <span class="operator">=</span> mapper.getDeptAndEmpByStepOne(<span class="number">1</span>);</span><br><span class="line">    System.out.println(dept);</span><br><span class="line">    System.out.println(dept.getDeptName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-动态-SQL"><a href="#10-动态-SQL" class="headerlink" title="10. 动态 SQL"></a>10. 动态 SQL</h3><blockquote><p>MyBatis 框架的 动态SQL 技术是一种<strong>根据特定条件动态拼装SQL语句的功能</strong>，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题</p><p>比如说根据图书编号，图书名，作者查询，只填一个，或者两个，或者三个，如果填了就添加在 sql 语句中，没填就不用(动态 sql)</p><p><strong>不是 null 或者 空字符串 就进行拼接</strong>，是 null 或者 空字符串 就不拼接</p><p>若都是空，需求一般就是要打印所有记录信息的</p></blockquote><ul><li><p>创建新的工程，设置好配置文件啥的</p><p><img src="/../img/MyBatis%E5%85%A5%E9%97%A8.assets/1672854914967.png" alt="图10.0.1"></p></li></ul><h4 id="10-1-if"><a href="#10-1-if" class="headerlink" title="10.1 if"></a>10.1 if</h4><blockquote><p>if标签可通过 test 属性（即传递过来的数据）的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</p><p>if: 通过 test 属性中的表达式<strong>判断标签中的内容是否有效(是否会拼接到 sql 中)</strong></p></blockquote><ul><li><p>在 mapper <strong>接口中添加方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据条件查询员工信息(多条件查询)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> emp 一个员工对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回 list 集合(因为不确定有几条返回值)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpByCondition</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 映射文件中<strong>添加 SQL 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1. if 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        emp_name = #&#123;empName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and age = #&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and gender = #&#123;gender&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpByCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    List&lt;Emp&gt; list = mapper.getEmpByCondition(emp);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="10-2-where"><a href="#10-2-where" class="headerlink" title="10.2 where"></a>10.2 where</h4><blockquote><p>为了解决后面条件不成立导致 sql 语句多出来的 where 的问题，<strong>一种方法是在 where 后头加上 ”1&#x3D;1“ 的恒成立条件</strong>，再将后头判断语句的前面都加上 ”and“ 即可，<strong>另一种方法是使用 where 标签</strong></p><p>where 和 if一般结合使用：</p><ul><li><strong>若 where 标签中的 if 条件都不满足</strong>，则where标签没有任何功能，即<strong>不会添加where关键字</strong></li><li><strong>若 where 标签中的 if 条件满足</strong>，则where标签会<strong>自动添加 where 关键字，并将条件最前方多余的 and 和 or 去掉</strong></li></ul><p><strong>注意：where标签不能去掉条件最后多余的and</strong></p></blockquote><ul><li><p>映射文件里的 sql 语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. where 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_name = #&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and gender = #&#123;gender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="10-3-trim"><a href="#10-3-trim" class="headerlink" title="10.3 trim"></a>10.3 trim</h4><blockquote><p>trim 用于<strong>去掉或添加标签中的内容</strong></p><p>常用属性:</p><p><strong>prefix</strong>：在trim标签中的内容的<strong>前面添加</strong>某些内容</p><p><strong>suffix</strong>：在trim标签中的内容的<strong>后面添加</strong>某些内容</p><p><strong>prefixOverrides</strong>：在trim标签中的内容的<strong>前面去掉</strong>某些内容</p><p><strong>suffixOverrides</strong>：在trim标签中的内容的<strong>后面去掉</strong>某些内容</p></blockquote><ul><li><p>映射文件里的 sql 语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3. trim 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_name = #&#123;empName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            gender = #&#123;gender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="10-4-choose、when、otherwise"><a href="#10-4-choose、when、otherwise" class="headerlink" title="10.4 choose、when、otherwise"></a>10.4 choose、when、otherwise</h4><blockquote><p>choose、when、otherwise <strong>相当于 if …… else if …… else ……</strong>  一个成立后面便不再执行, 所以也不用加 and</p><p>因此 where 后头最多只能加一个条件, 不能多条件查询了</p><p><strong>when(表示 if..elif) 至少设置一个</strong>, <strong>otherwise(表示 else) 最多设置一个</strong></p></blockquote><ul><li><p>在 mapper <strong>接口中添加方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 choose 查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> emp 一个员工对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回 list 集合(因为不确定有几条返回值)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpByChoose</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 映射文件中<strong>添加 SQL 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Emp&gt; getEmpByChoose(Emp emp); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4. choose, when, otherwise 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                emp_name = #&#123;empName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;gender != null and gender != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                gender = #&#123;gender&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="10-5-foreach-重要"><a href="#10-5-foreach-重要" class="headerlink" title="10.5 foreach(重要)"></a>10.5 foreach(重要)</h4><blockquote><p>foreach: <strong>循环执行该标签里头的内容</strong>, 其<strong>具体属性</strong>有:<br>           <strong>collection</strong>: 设置要循环的数组或集合<br>           <strong>item</strong>: 用一个字符串来表示数组或集合中的每一个数据<br>           <strong>separator</strong>: 设置每次循环的数据之间的分隔符<br>           <strong>open</strong>: 循环的所有内容以什么开始<br>           <strong>close</strong>: 循环的所有内容以什么结束</p></blockquote><p>（1）&#x3D;&#x3D;批量添加&#x3D;&#x3D;</p><ul><li><p>在 mapper <strong>接口中添加方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 批量添加员工信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> emps 存放 Emp对象的集合</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertMoreEmp</span><span class="params">(<span class="meta">@Param(&quot;emps&quot;)</span> List&lt;Emp&gt; emps)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 映射文件中<strong>添加 SQL 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void insertMoreEmp(@Param(&quot;emps&quot;) List&lt;Emp&gt; emps); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5.1 foreach 批量添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">    insert into t_emp values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (null, #&#123;emp.empName&#125;, #&#123;emp.age&#125;, #&#123;emp.gender&#125;, null)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertMoreEmp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;小明1&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;小明2&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="string">&quot;小明3&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    List&lt;Emp&gt; list = Arrays.asList(emp1, emp2, emp3);</span><br><span class="line">    mapper.insertMoreEmp(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）&#x3D;&#x3D;批量删除&#x3D;&#x3D;</p><ul><li><p>在 mapper <strong>接口中添加方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> empIds 存放 用户id 的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteMoreEmp</span><span class="params">(<span class="meta">@Param(&quot;empIds&quot;)</span> Integer[] empIds)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 映射文件中<strong>添加 SQL 语句</strong></p><blockquote><p>此处删除可用两种方法 </p><ul><li><strong>where id in(???)</strong></li><li><strong>where or…or…</strong></li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void deleteMoreEmp(@Param(&quot;empIds&quot;) Integer[] empIds); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5.2 foreach 批量删除 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreEmp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 5.2.1 用 where..in(?,?,?) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--delete from t_emp where emp_id in</span></span><br><span class="line"><span class="comment">        &lt;foreach collection=&quot;empIds&quot; item=&quot;empId&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;</span></span><br><span class="line"><span class="comment">             #&#123;empId&#125;</span></span><br><span class="line"><span class="comment">        &lt;/foreach&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5.2.1 用 where...or... --&gt;</span></span><br><span class="line">    delete from t_emp where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;empId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">        emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteMoreEmp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line"></span><br><span class="line">    Integer[] empIds = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">    mapper.deleteMoreEmp(empIds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="10-6-SQL-片段"><a href="#10-6-SQL-片段" class="headerlink" title="10.6 SQL 片段"></a>10.6 SQL 片段</h4><blockquote><p><strong>select * 少用</strong>，数据多了的话查询效率特低，因为查询的时候会先把<em>查询成所有字段，所以<strong>建议写全</strong>，写全以后又很麻烦，*<em>直接用sql标签，然后引用，减少代码冗余</em></em></p><p>sql片段，可以<strong>记录一段公共sql片段，在使用的地方通过 include 标签进行引入</strong></p></blockquote><ul><li><p><strong>声明</strong> sql 片段 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span></span><br><span class="line">    emp_id, emp_name, age, gender, dept_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>引用</strong> sql 片段 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br></pre></td></tr></table></figure></li></ul><h3 id="11-MyBatis-的缓存"><a href="#11-MyBatis-的缓存" class="headerlink" title="11. MyBatis 的缓存"></a>11. MyBatis 的缓存</h3><ul><li><p>创建新的工程</p><p><img src="/../img/MyBatis%E5%85%A5%E9%97%A8.assets/1672862472810.png" alt="图11.0.1"></p></li></ul><h4 id="11-1-MyBatis-的一级缓存"><a href="#11-1-MyBatis-的一级缓存" class="headerlink" title="11.1 MyBatis 的一级缓存"></a>11.1 MyBatis 的一级缓存</h4><blockquote><p><strong>一级缓存是默认开启的</strong>，且是 SqlSession 级别的，也就是通过同一个 SqlSession 查询的数据会被缓存，<strong>下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</strong></p><p>使<strong>一级缓存失效</strong>的四种情况：</p><p>1）<strong>不同的 SqlSession</strong> 对应不同的一级缓存</p><p>2）<strong>同一个 SqlSession 但是查询条件不同</strong></p><p>3）<strong>同一个 SqlSession 两次查询期间执行了任何一次增删改操作</strong>(因为任意一次增删改执行完后会自动清空缓存)</p><p>4）<strong>同一个 SqlSession 两次查询期间手动清空了缓存</strong>（清空缓存可以使用）</p></blockquote><ul><li><p>在 mapper <strong>接口中添加方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据员工 id 查询员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> empId 员工 id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回一个 Emp 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpById</span><span class="params">(<span class="meta">@Param(&quot;empId&quot;)</span> Integer empId)</span>;</span><br></pre></td></tr></table></figure></li><li><p>在 映射文件中<strong>添加 SQL 语句</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Emp getEmpById(@Param(&quot;empId&quot;) Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">            MyBatis的一级缓存: (默认开启)</span></span><br><span class="line"><span class="comment">            sqlSession 级别的, 即通过同一个 sqlSession 查询出来的数据会被缓存</span></span><br><span class="line"><span class="comment">            再次使用同一个 sqlSession 查询同一条数据, 会从缓存中获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 第一个 sqlSession</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">CacheMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CacheMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> mapper1.getEmpById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动清空一级缓存, 会使一级缓存失效</span></span><br><span class="line">    <span class="comment">// sqlSession1.clearCache();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询相同的数据, 从运行结果可以看出只执行了一次 sql, 返回了两条数据</span></span><br><span class="line">    <span class="comment">// 故 emp1 是从数据库里头查的, emp2 是从缓存里查的</span></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> mapper1.getEmpById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个 sqlSession</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">CacheMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(CacheMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// emp3 会再次从数据库里头查, 因为与上头那个不是同一个 sqlSession</span></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> mapper2.getEmpById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="11-2-MyBatis-的二级缓存"><a href="#11-2-MyBatis-的二级缓存" class="headerlink" title="11.2 MyBatis 的二级缓存"></a>11.2 MyBatis 的二级缓存</h4><blockquote><p>二级缓存是 <strong>SqlSessionFactory 级别</strong>，通过同一个SqlSessionFactory 创建的 SqlSession 查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p>二级缓存<strong>开启的条件</strong>：</p><ul><li>在核心配置文件中，设置全局配置属性<strong>cacheEnabled&#x3D;”true”<strong>，</strong>默认为true</strong>，<strong>不需要设置</strong></li><li>在<strong>映射文件中设置标签 &lt;cache &#x2F;&gt;</strong></li><li>二级缓存必须<strong>在SqlSession关闭或提交之后有效</strong></li><li>查询的数据所转换的<strong>实体类类型必须实现序列化 Serializable 的接口</strong></li></ul><p>使二级缓存<strong>失效</strong>的情况：两次查询之间<strong>执行了任意的增删改，会使一级和二级缓存同时失效</strong></p></blockquote><ul><li><p>查询的数据所转换的实体类类型<strong>实现序列化接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;...&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCache</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 测试二级缓存, 故不能直接用工具类, 需要重新获取一个 SqlSessionFactory</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由同一个 sqlSessionFactory 得到的 sqlSession1 和 sqlSession2</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">CacheMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CacheMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> mapper1.getEmpById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二级缓存必须在 SqlSession 关闭或提交之后有效(关闭后, 保存在一级缓存中的数据才会被保存到二级缓存中)</span></span><br><span class="line">    sqlSession1.close();</span><br><span class="line"></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">CacheMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(CacheMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> mapper2.getEmpById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(emp2);</span><br><span class="line"></span><br><span class="line">    sqlSession2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/../img/MyBatis%E5%85%A5%E9%97%A8.assets/1672905310136.png" alt="图11.2.1"></p><h4 id="11-3-二级缓存的相关配置"><a href="#11-3-二级缓存的相关配置" class="headerlink" title="11.3 二级缓存的相关配置"></a>11.3 二级缓存的相关配置</h4><blockquote><p>cache 标签的<strong>相关属性</strong>：</p><ul><li><strong>eviction属性</strong>：缓存回收策略</li></ul><p>LRU（Least Recently Used） – <strong>最近最少使用的</strong>：移除最长时间不被使用的对象。</p><p>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</p><p>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</p><p>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p><p><strong>默认的是 LRU</strong></p><ul><li><strong>flushInterval属性</strong>：刷新间隔，单位毫秒</li></ul><p><strong>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句（增删改）时刷新</strong></p><ul><li><strong>size属性</strong>：引用数目，正整数</li></ul><p>代表<strong>缓存最多可以存储多少个对象</strong>，太大容易导致内存溢出</p><ul><li><strong>readOnly属性</strong>：<strong>只读</strong>，true&#x2F;false</li></ul><p>true：只读缓存；会给所有调用者返回缓存对象的相同实例(将缓存的数据直接返回给调用者)。因此这些对象不能被修改。这提供了很重要的性能优势。</p><p>false：<strong>读写缓存</strong>；会返回缓存对象的拷贝（通过<strong>序列化</strong>）。这会<strong>慢一些，但是安全，因此默认是false</strong></p></blockquote><h4 id="11-4-MyBatis-缓存查询的顺序"><a href="#11-4-MyBatis-缓存查询的顺序" class="headerlink" title="11.4 MyBatis 缓存查询的顺序"></a>11.4 MyBatis 缓存查询的顺序</h4><blockquote><p>从大范围查到小范围，二级缓存是SqlSessionFactory 范围更大些</p><p>若一级缓存和二级缓存都开启，则<strong>先查询二级缓存</strong>，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用</p><p>如果<strong>二级缓存没有命中，再查询一级缓存</strong>(因为可能没关闭，所以一级里头可能有二级没有的)</p><p>二级缓存是要session提交后的数据，而一级缓存里面的数据不一定提交了</p><p>如果<strong>一级缓存也没有命中，则查询数据库</strong></p><p>SqlSession关闭之前，数据默认保存在一级缓存之中，但<strong>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</strong></p></blockquote><h4 id="11-5-整合第三方缓存-EHCache-了解即可"><a href="#11-5-整合第三方缓存-EHCache-了解即可" class="headerlink" title="11.5 整合第三方缓存 EHCache(了解即可)"></a>11.5 整合第三方缓存 EHCache(了解即可)</h4><p>（1）<strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）各 jar 包功能</p><table><thead><tr><th align="center"><strong>jar 包名称</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center">mybatis-ehcache</td><td align="center">Mybatis和EHCache的整合包</td></tr><tr><td align="center">ehcache</td><td align="center">EHCache核心包</td></tr><tr><td align="center">slf4j-api</td><td align="center">SLF4J日志门面包</td></tr><tr><td align="center">logback-classic</td><td align="center">支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><p>（3）<strong>创建 EHCache 的配置文件 ehcache.xml</strong> (名字必须为 ehcache.xml)</p><blockquote><p>爆红不用管，能实现功能就行</p></blockquote><p><img src="/../img/MyBatis%E5%85%A5%E9%97%A8.assets/1672908139529.png" alt="图11.5.1"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\ehcache&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 设置缓存的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）<strong>设置二级缓存的类型</strong></p><blockquote><p>在xxxMapper.xml文件中设置二级缓存类型</p><p>例如，在 CacheMapper.xml 中设置 </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>（5）<strong>加入 logback 日志</strong></p><blockquote><p><strong>存在SLF4J时，作为简易日志的log4j将失效</strong>，此时我们需要借助SLF4J的具体实现logback来打印日志。</p><p>创建logback的配置文件 logback.xml，<strong>名字固定，不可改变</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.thr.mybatis.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-MyBatis-的逆向工程"><a href="#12-MyBatis-的逆向工程" class="headerlink" title="12. MyBatis 的逆向工程"></a>12. MyBatis 的逆向工程</h3><blockquote><p><strong>正向工程</strong>：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</p><p><strong>逆向工程</strong>(本质是代码生成器)：<strong>先创建数据库表，由框架负责根据数据库表，反向生成如下资源</strong>：</p><ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper映射文件</li></ul><p>逆向工程时，如果出现生成的实体类总是错误，属性命名没有根据命名规则来，甚至出现了在表中没有的属性：</p><p>可以尝试在数据库连接的 URL 后面加上  nullCatalogMeansCurrent&#x3D;true </p></blockquote><h4 id="12-1-创建逆向工程的步骤-简洁版"><a href="#12-1-创建逆向工程的步骤-简洁版" class="headerlink" title="12.1 创建逆向工程的步骤(简洁版)"></a>12.1 创建逆向工程的步骤(简洁版)</h4><p>（1）<strong>设置打包方式为jar，添加依赖和插件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis核心依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）创建 MyBatis 的核心配置文件、逆向工程的配置文件</p><blockquote><p>这里 MyBatis 的核心配置文件 可以先不用填写 typeAliase 和 mappers 的包名，可以等到逆向后再填写</p><p> 逆向工程的配置文件名字必须是 generatorConfig.xml，上面的 URI 爆红不用管 </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">            MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">            MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?useSSL=false<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                                       serverTimezone=UTC<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;thr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.thr.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                enableSubPackages：设置是否能用子包</span></span><br><span class="line"><span class="comment">                    true：targetPackage属性中每一个点对应一层包(目录)</span></span><br><span class="line"><span class="comment">                    false：targetPackage中的名字只作为一层包(目录)</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- trimStrings：去掉字符串前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.thr.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.thr.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName：设置表名，若设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName：设置生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）<strong>执行 MBG 插件的 generate 目标</strong>(双击即可)</p><p><img src="/../img/MyBatis%E5%85%A5%E9%97%A8.assets/1672910013957.png" alt="图12.1.1"></p><blockquote><p>执行后，就会在对应位置生成实体类和 xml 文件 </p><p>之后注意完善核心配置文件 mybatis-config.xml</p><p>将 typeAliases 和 mappers 标签对应的包名填上  </p></blockquote><p><img src="/../img/MyBatis%E5%85%A5%E9%97%A8.assets/1672910715864.png" alt="图12.1.2"></p><h4 id="12-2-逆向工程-MyBatis3-生成的方法说明-奢华版"><a href="#12-2-逆向工程-MyBatis3-生成的方法说明-奢华版" class="headerlink" title="12.2 逆向工程 MyBatis3 生成的方法说明(奢华版)"></a>12.2 逆向工程 MyBatis3 生成的方法说明(奢华版)</h4><blockquote><p>1、只要<strong>方法中有 Example</strong>，那就是<strong>根据条件来查询</strong>，<strong>例如</strong> <strong>countByExample 根据条件查询记录数</strong>，deleteByExample 根据条件删除</p><p>2、<strong>普通插入</strong> int <strong>insert</strong>(Emp record) 和 <strong>选择性插入</strong> int <strong>insertSelective</strong>(Emp record) 的区别：若传入的方法参数的实体类的某个属性<strong>含有 null 值</strong>，普通插入会将 null 作为该值赋给对应字段，而<strong>选择性插入只会为属性值不是 null 的字段赋值，不会为属性是 null 的字段赋值</strong>。当然，由于默认值为 null，所以效果并不明显</p><p>3、<strong>普通修改和选择性修改的区别</strong>：若传入的方法参数的实体类的某个属性含有 null 值，<strong>普通修改会将对应字段赋值为 null</strong>，而<strong>选择性修改只会修改属性不是 null 的对应的字段</strong></p></blockquote><ul><li><p>先将前面自动生成目录等的删除掉，然后在 <strong>generatorConfig.xml 文件</strong>中将执行生成的逆向工程的<strong>版本改成 MyBatis3</strong>，再次找到插件双击即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">            MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">            MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../img/MyBatis%E5%85%A5%E9%97%A8.assets/1672926844177.png" alt="图12.2.1"></p><blockquote><p>效果如下：</p><p>自动生成的Emp类和Dept类是没有 toString 方法和无参有参构造的！建议自己加上去</p></blockquote><p><img src="/../img/MyBatis%E5%85%A5%E9%97%A8.assets/1672926936391.png" alt="图12.2.2"></p></li><li><p><strong>测试</strong></p><blockquote><p>对于单表而言很好用，多表查询还是乖乖的自己写 sql 语句</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 根据主键 id 查用户信息</span></span><br><span class="line">    <span class="comment">/*Emp emp = mapper.selectByPrimaryKey(1);</span></span><br><span class="line"><span class="comment">        System.out.println(emp);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 查所有用户信息(放个 null 进去即可)</span></span><br><span class="line">    <span class="comment">/*List&lt;Emp&gt; list = mapper.selectByExample(null);</span></span><br><span class="line"><span class="comment">        list.forEach(System.out::println);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 根据条件查询数据(Query By Criteria: QBC 查询)</span></span><br><span class="line">    <span class="comment">/*EmpExample example = new EmpExample();</span></span><br><span class="line"><span class="comment">        example.createCriteria().andEmpNameEqualTo(&quot;张三&quot;).andAgeGreaterThanOrEqualTo(20);  // 创建条件对象</span></span><br><span class="line"><span class="comment">        example.or().andGenderEqualTo(&quot;男&quot;); // 上一句会和这一句以 or 连接</span></span><br><span class="line"><span class="comment">        List&lt;Emp&gt; list = mapper.selectByExample(example);</span></span><br><span class="line"><span class="comment">        list.forEach(System.out::println);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">1</span>, <span class="string">&quot;小黑&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">    <span class="comment">// 4. 测试普通修改功能(即使给的要修改的属性为 null, 也会把 null 赋值给原来的数据)</span></span><br><span class="line">    <span class="comment">// mapper.updateByPrimaryKey(emp);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 测试选择性修改功能(如果给的要修改的属性为 null, 其不会更改原来的数据)</span></span><br><span class="line">    mapper.updateByPrimaryKeySelective(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="13-分页插件"><a href="#13-分页插件" class="headerlink" title="13. 分页插件"></a>13. 分页插件</h3><blockquote><p>sql 语句实现分页查询：<strong>limit index,pageSize</strong></p><p><strong>pageSize</strong>：每页显示的条数(已知)</p><p><strong>pageNum</strong>：当前页的页码(已知)</p><p><strong>index</strong>：当前页的<strong>起始索引</strong></p><p>由公式：<strong>index &#x3D; (pageNum - 1) * pageSize</strong></p><p>eg. 每页 4 条，当前是第 3 页 —&gt; 则 index &#x3D; 4 * (3 - 1) &#x3D; 8  —&gt; 此时的 sql 语句：limit 8,4</p><p><strong>count</strong>：当前的总记录数</p><p><strong>totalPage</strong>：总页数   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">totalPage = count / pageSize;</span><br><span class="line"><span class="keyword">if</span> (count % pageSize != <span class="number">0</span>) &#123;</span><br><span class="line">    totalPage += <span class="number">1</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="13-1-分页插件的使用步骤"><a href="#13-1-分页插件的使用步骤" class="headerlink" title="13.1 分页插件的使用步骤"></a>13.1 分页插件的使用步骤</h4><p>（1）<strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）<strong>配置分页插件</strong></p><blockquote><p><strong>在 MyBatis 的核心配置文件</strong>（mybatis-config.xml）中配置插件，注意位置在 typeAliases 和 environments 标签之间</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置分页插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）<strong>测试分页功能</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 在查询功能里头实现分页</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在查询功能之前开启分页功能(此处表示查询第一页, 每页展示 4 条数据)</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有数据</span></span><br><span class="line">    List&lt;Emp&gt; list = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-2-分页插件的使用-获取分页相关数据"><a href="#13-2-分页插件的使用-获取分页相关数据" class="headerlink" title="13.2 分页插件的使用(获取分页相关数据)"></a>13.2 分页插件的使用(获取分页相关数据)</h4><p>（1）通过<strong>查询之前 PageHelper.startPage(int pageNum, int pageSize) 获取对应对象并输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 获取分页相关数据(直接通过 page 对象输出)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetPageData</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在查询功能之前开启分页功能(此处表示查询第一页, 每页展示 4 条数据)</span></span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有数据</span></span><br><span class="line">    List&lt;Emp&gt; list = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    System.out.println(page);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* page 的输出为:</span></span><br><span class="line"><span class="comment">            Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, </span></span><br><span class="line"><span class="comment">                total=30, pages=8, reasonable=false, pageSizeZero=false&#125;</span></span><br><span class="line"><span class="comment">                [Emp&#123;empId=1, empName=&#x27;aaa&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;, </span></span><br><span class="line"><span class="comment">                 Emp&#123;empId=2, empName=&#x27;aa&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;, </span></span><br><span class="line"><span class="comment">                 Emp&#123;empId=3, empName=&#x27;a&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;, </span></span><br><span class="line"><span class="comment">                 Emp&#123;empId=4, empName=&#x27;a&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）<strong>通过获取 PageInfo 对象 获取数据</strong></p><blockquote><p>在<strong>查询获取list集合之后</strong>，使用PageInfo&lt;T&gt; pageInfo &#x3D; new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages) <strong>获取分页相关所有数据</strong>，PageInfo 比 Page 获取的数据多些</p><ul><li>list：分页之后的数据</li><li>navigatePages：导航分页的页码数</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 获取分页相关数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetPageInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtil.getSqlSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在查询功能之前开启分页功能(此处表示查询第一页, 每页展示 4 条数据)</span></span><br><span class="line">    Page&lt;Object&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有数据</span></span><br><span class="line">    List&lt;Emp&gt; list = mapper.selectByExample(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询功能之后可以通过 PageInfo 获取分页相关的所有数据</span></span><br><span class="line">    PageInfo&lt;Emp&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list, <span class="number">5</span>);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    System.out.println(pageInfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* pageInfo 的输出为: (其中 list 就是上面 page 的内容)</span></span><br><span class="line"><span class="comment">            PageInfo&#123;pageNum=1, pageSize=4, size=4, startRow=1, endRow=4, total=30, pages=8, </span></span><br><span class="line"><span class="comment">                    list=Page&#123;count=true, pageNum=1, pageSize=4, startRow=0, endRow=4, total=30, </span></span><br><span class="line"><span class="comment">                        pages=8, reasonable=false, pageSizeZero=false&#125;</span></span><br><span class="line"><span class="comment">                    [Emp&#123;empId=1, empName=&#x27;aaa&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;, </span></span><br><span class="line"><span class="comment">                    Emp&#123;empId=2, empName=&#x27;aa&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;, </span></span><br><span class="line"><span class="comment">                    Emp&#123;empId=3, empName=&#x27;a&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;, </span></span><br><span class="line"><span class="comment">                    Emp&#123;empId=4, empName=&#x27;a&#x27;, age=null, gender=&#x27;null&#x27;, deptId=null&#125;], </span></span><br><span class="line"><span class="comment">                    prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, </span></span><br><span class="line"><span class="comment">                    hasNextPage=true, navigatePages=5, navigateFirstPage=1, navigateLastPage=5, </span></span><br><span class="line"><span class="comment">                    navigatepageNums=[1, 2, 3, 4, 5]&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常用数据：</p><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><p>size：当前页显示的真实条数</p><p>total：总记录数</p><p>pages：总页数</p><p>prePage：上一页的页码</p><p>nextPage：下一页的页码</p><p>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页</p><p>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页</p><p>navigatePages：导航分页的页码数</p><p>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
